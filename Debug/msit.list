
msit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003890  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003a18  08003a18  00013a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a38  08003a38  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003a38  08003a38  00013a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a40  08003a40  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a40  08003a40  00013a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a44  08003a44  00013a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000001b8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001c4  200001c4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b220  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a7d  00000000  00000000  0002b25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000918  00000000  00000000  0002cce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000880  00000000  00000000  0002d5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002030e  00000000  00000000  0002de78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000acf7  00000000  00000000  0004e186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3743  00000000  00000000  00058e7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011c5c0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000024c4  00000000  00000000  0011c610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003a00 	.word	0x08003a00

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003a00 	.word	0x08003a00

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_SPI_TxRxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI2) {
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a0f      	ldr	r2, [pc, #60]	; (8000518 <HAL_SPI_TxRxCpltCallback+0x4c>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d117      	bne.n	800050e <HAL_SPI_TxRxCpltCallback+0x42>
		if (HAL_SPI_GetError(&hspi2) != HAL_SPI_ERROR_NONE) {
 80004de:	480f      	ldr	r0, [pc, #60]	; (800051c <HAL_SPI_TxRxCpltCallback+0x50>)
 80004e0:	f002 f92e 	bl	8002740 <HAL_SPI_GetError>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d008      	beq.n	80004fc <HAL_SPI_TxRxCpltCallback+0x30>
			spi_flag_2 = 0;
 80004ea:	4b0d      	ldr	r3, [pc, #52]	; (8000520 <HAL_SPI_TxRxCpltCallback+0x54>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	701a      	strb	r2, [r3, #0]
			memset(spi_receive, 0, 24);
 80004f0:	2218      	movs	r2, #24
 80004f2:	2100      	movs	r1, #0
 80004f4:	480b      	ldr	r0, [pc, #44]	; (8000524 <HAL_SPI_TxRxCpltCallback+0x58>)
 80004f6:	f003 fa7b 	bl	80039f0 <memset>
 80004fa:	e002      	b.n	8000502 <HAL_SPI_TxRxCpltCallback+0x36>
		} else {
			spi_flag_2 = 1;
 80004fc:	4b08      	ldr	r3, [pc, #32]	; (8000520 <HAL_SPI_TxRxCpltCallback+0x54>)
 80004fe:	2201      	movs	r2, #1
 8000500:	701a      	strb	r2, [r3, #0]
		}
		HAL_GPIO_WritePin(SPI_NSS_2_GPIO_Port, SPI_NSS_2_Pin, SET);
 8000502:	2201      	movs	r2, #1
 8000504:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000508:	4807      	ldr	r0, [pc, #28]	; (8000528 <HAL_SPI_TxRxCpltCallback+0x5c>)
 800050a:	f001 fa75 	bl	80019f8 <HAL_GPIO_WritePin>
	}
}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40003800 	.word	0x40003800
 800051c:	20000030 	.word	0x20000030
 8000520:	200001bc 	.word	0x200001bc
 8000524:	200001a4 	.word	0x200001a4
 8000528:	40021000 	.word	0x40021000

0800052c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000530:	f000 fbaa 	bl	8000c88 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000534:	f000 f82e 	bl	8000594 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000538:	f000 f934 	bl	80007a4 <MX_GPIO_Init>
	MX_DMA_Init();
 800053c:	f000 f90a 	bl	8000754 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000540:	f000 f8de 	bl	8000700 <MX_USART2_UART_Init>
	MX_SPI2_Init();
 8000544:	f000 f8a4 	bl	8000690 <MX_SPI2_Init>
	MX_CRC_Init();
 8000548:	f000 f88e 	bl	8000668 <MX_CRC_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (spi_flag_2 == 0) {
 800054c:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <main+0x54>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d10c      	bne.n	800056e <main+0x42>
			HAL_GPIO_WritePin(SPI_NSS_2_GPIO_Port, SPI_NSS_2_Pin, RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800055a:	480a      	ldr	r0, [pc, #40]	; (8000584 <main+0x58>)
 800055c:	f001 fa4c 	bl	80019f8 <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t*) (&spi_transmit),
 8000560:	2318      	movs	r3, #24
 8000562:	4a09      	ldr	r2, [pc, #36]	; (8000588 <main+0x5c>)
 8000564:	4909      	ldr	r1, [pc, #36]	; (800058c <main+0x60>)
 8000566:	480a      	ldr	r0, [pc, #40]	; (8000590 <main+0x64>)
 8000568:	f001 ff42 	bl	80023f0 <HAL_SPI_TransmitReceive_IT>
 800056c:	e7ee      	b.n	800054c <main+0x20>
					(uint8_t*) (&spi_receive), 24);
		} else if (spi_flag_2 == 1) {
 800056e:	4b04      	ldr	r3, [pc, #16]	; (8000580 <main+0x54>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d1ea      	bne.n	800054c <main+0x20>
			spi_flag_2 = 0;
 8000576:	4b02      	ldr	r3, [pc, #8]	; (8000580 <main+0x54>)
 8000578:	2200      	movs	r2, #0
 800057a:	701a      	strb	r2, [r3, #0]
		if (spi_flag_2 == 0) {
 800057c:	e7e6      	b.n	800054c <main+0x20>
 800057e:	bf00      	nop
 8000580:	200001bc 	.word	0x200001bc
 8000584:	40021000 	.word	0x40021000
 8000588:	200001a4 	.word	0x200001a4
 800058c:	2000018c 	.word	0x2000018c
 8000590:	20000030 	.word	0x20000030

08000594 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b094      	sub	sp, #80	; 0x50
 8000598:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800059a:	f107 0320 	add.w	r3, r7, #32
 800059e:	2230      	movs	r2, #48	; 0x30
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f003 fa24 	bl	80039f0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	4b28      	ldr	r3, [pc, #160]	; (8000660 <SystemClock_Config+0xcc>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	4a27      	ldr	r2, [pc, #156]	; (8000660 <SystemClock_Config+0xcc>)
 80005c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c6:	6413      	str	r3, [r2, #64]	; 0x40
 80005c8:	4b25      	ldr	r3, [pc, #148]	; (8000660 <SystemClock_Config+0xcc>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	4b22      	ldr	r3, [pc, #136]	; (8000664 <SystemClock_Config+0xd0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a21      	ldr	r2, [pc, #132]	; (8000664 <SystemClock_Config+0xd0>)
 80005de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <SystemClock_Config+0xd0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f0:	2302      	movs	r3, #2
 80005f2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f4:	2301      	movs	r3, #1
 80005f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f8:	2310      	movs	r3, #16
 80005fa:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fc:	2302      	movs	r3, #2
 80005fe:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000600:	2300      	movs	r3, #0
 8000602:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000604:	2308      	movs	r3, #8
 8000606:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000608:	23a8      	movs	r3, #168	; 0xa8
 800060a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060c:	2302      	movs	r3, #2
 800060e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000610:	2304      	movs	r3, #4
 8000612:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000614:	f107 0320 	add.w	r3, r7, #32
 8000618:	4618      	mov	r0, r3
 800061a:	f001 fa07 	bl	8001a2c <HAL_RCC_OscConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x94>
		Error_Handler();
 8000624:	f000 f92c 	bl	8000880 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000628:	230f      	movs	r3, #15
 800062a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062c:	2302      	movs	r3, #2
 800062e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000634:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000638:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800063a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2105      	movs	r1, #5
 8000646:	4618      	mov	r0, r3
 8000648:	f001 fc68 	bl	8001f1c <HAL_RCC_ClockConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0xc2>
		Error_Handler();
 8000652:	f000 f915 	bl	8000880 <Error_Handler>
	}
}
 8000656:	bf00      	nop
 8000658:	3750      	adds	r7, #80	; 0x50
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_CRC_Init+0x20>)
 800066e:	4a07      	ldr	r2, [pc, #28]	; (800068c <MX_CRC_Init+0x24>)
 8000670:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_CRC_Init+0x20>)
 8000674:	f000 fc8b 	bl	8000f8e <HAL_CRC_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_CRC_Init+0x1a>
		Error_Handler();
 800067e:	f000 f8ff 	bl	8000880 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000028 	.word	0x20000028
 800068c:	40023000 	.word	0x40023000

08000690 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000694:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <MX_SPI2_Init+0x68>)
 8000696:	4a19      	ldr	r2, [pc, #100]	; (80006fc <MX_SPI2_Init+0x6c>)
 8000698:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800069a:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <MX_SPI2_Init+0x68>)
 800069c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006a0:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <MX_SPI2_Init+0x68>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006a8:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <MX_SPI2_Init+0x68>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ae:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <MX_SPI2_Init+0x68>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b4:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <MX_SPI2_Init+0x68>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_SPI2_Init+0x68>)
 80006bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c0:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80006c2:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <MX_SPI2_Init+0x68>)
 80006c4:	2238      	movs	r2, #56	; 0x38
 80006c6:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006c8:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_SPI2_Init+0x68>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ce:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <MX_SPI2_Init+0x68>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 80006d4:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_SPI2_Init+0x68>)
 80006d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006da:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_SPI2_Init+0x68>)
 80006de:	220a      	movs	r2, #10
 80006e0:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_SPI2_Init+0x68>)
 80006e4:	f001 fdfa 	bl	80022dc <HAL_SPI_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_SPI2_Init+0x62>
		Error_Handler();
 80006ee:	f000 f8c7 	bl	8000880 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000030 	.word	0x20000030
 80006fc:	40003800 	.word	0x40003800

08000700 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000706:	4a12      	ldr	r2, [pc, #72]	; (8000750 <MX_USART2_UART_Init+0x50>)
 8000708:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 38400;
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_USART2_UART_Init+0x4c>)
 800070c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000710:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_USART2_UART_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_USART2_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000738:	f002 fa22 	bl	8002b80 <HAL_UART_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000742:	f000 f89d 	bl	8000880 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000088 	.word	0x20000088
 8000750:	40004400 	.word	0x40004400

08000754 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <MX_DMA_Init+0x4c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a0f      	ldr	r2, [pc, #60]	; (80007a0 <MX_DMA_Init+0x4c>)
 8000764:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <MX_DMA_Init+0x4c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	2100      	movs	r1, #0
 800077a:	2010      	movs	r0, #16
 800077c:	f000 fbd1 	bl	8000f22 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000780:	2010      	movs	r0, #16
 8000782:	f000 fbea 	bl	8000f5a <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2100      	movs	r1, #0
 800078a:	2011      	movs	r0, #17
 800078c:	f000 fbc9 	bl	8000f22 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000790:	2011      	movs	r0, #17
 8000792:	f000 fbe2 	bl	8000f5a <HAL_NVIC_EnableIRQ>

}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800

080007a4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	; 0x28
 80007a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	4b2e      	ldr	r3, [pc, #184]	; (8000878 <MX_GPIO_Init+0xd4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a2d      	ldr	r2, [pc, #180]	; (8000878 <MX_GPIO_Init+0xd4>)
 80007c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b2b      	ldr	r3, [pc, #172]	; (8000878 <MX_GPIO_Init+0xd4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	4b27      	ldr	r3, [pc, #156]	; (8000878 <MX_GPIO_Init+0xd4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a26      	ldr	r2, [pc, #152]	; (8000878 <MX_GPIO_Init+0xd4>)
 80007e0:	f043 0304 	orr.w	r3, r3, #4
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b24      	ldr	r3, [pc, #144]	; (8000878 <MX_GPIO_Init+0xd4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0304 	and.w	r3, r3, #4
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	4b20      	ldr	r3, [pc, #128]	; (8000878 <MX_GPIO_Init+0xd4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a1f      	ldr	r2, [pc, #124]	; (8000878 <MX_GPIO_Init+0xd4>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <MX_GPIO_Init+0xd4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b19      	ldr	r3, [pc, #100]	; (8000878 <MX_GPIO_Init+0xd4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a18      	ldr	r2, [pc, #96]	; (8000878 <MX_GPIO_Init+0xd4>)
 8000818:	f043 0310 	orr.w	r3, r3, #16
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b16      	ldr	r3, [pc, #88]	; (8000878 <MX_GPIO_Init+0xd4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0310 	and.w	r3, r3, #16
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	4b12      	ldr	r3, [pc, #72]	; (8000878 <MX_GPIO_Init+0xd4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a11      	ldr	r2, [pc, #68]	; (8000878 <MX_GPIO_Init+0xd4>)
 8000834:	f043 0302 	orr.w	r3, r3, #2
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_GPIO_Init+0xd4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0302 	and.w	r3, r3, #2
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI_NSS_2_GPIO_Port, SPI_NSS_2_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800084c:	480b      	ldr	r0, [pc, #44]	; (800087c <MX_GPIO_Init+0xd8>)
 800084e:	f001 f8d3 	bl	80019f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : SPI_NSS_2_Pin */
	GPIO_InitStruct.Pin = SPI_NSS_2_Pin;
 8000852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000856:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SPI_NSS_2_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4619      	mov	r1, r3
 800086a:	4804      	ldr	r0, [pc, #16]	; (800087c <MX_GPIO_Init+0xd8>)
 800086c:	f000 ff28 	bl	80016c0 <HAL_GPIO_Init>

}
 8000870:	bf00      	nop
 8000872:	3728      	adds	r7, #40	; 0x28
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40023800 	.word	0x40023800
 800087c:	40021000 	.word	0x40021000

08000880 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000884:	b672      	cpsid	i
}
 8000886:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000888:	e7fe      	b.n	8000888 <Error_Handler+0x8>
	...

0800088c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <HAL_MspInit+0x4c>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089a:	4a0f      	ldr	r2, [pc, #60]	; (80008d8 <HAL_MspInit+0x4c>)
 800089c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a0:	6453      	str	r3, [r2, #68]	; 0x44
 80008a2:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <HAL_MspInit+0x4c>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <HAL_MspInit+0x4c>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	4a08      	ldr	r2, [pc, #32]	; (80008d8 <HAL_MspInit+0x4c>)
 80008b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008bc:	6413      	str	r3, [r2, #64]	; 0x40
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <HAL_MspInit+0x4c>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800

080008dc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a0b      	ldr	r2, [pc, #44]	; (8000918 <HAL_CRC_MspInit+0x3c>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d10d      	bne.n	800090a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <HAL_CRC_MspInit+0x40>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a09      	ldr	r2, [pc, #36]	; (800091c <HAL_CRC_MspInit+0x40>)
 80008f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b07      	ldr	r3, [pc, #28]	; (800091c <HAL_CRC_MspInit+0x40>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800090a:	bf00      	nop
 800090c:	3714      	adds	r7, #20
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	40023000 	.word	0x40023000
 800091c:	40023800 	.word	0x40023800

08000920 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	; 0x28
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a2c      	ldr	r2, [pc, #176]	; (80009f0 <HAL_SPI_MspInit+0xd0>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d152      	bne.n	80009e8 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	4b2b      	ldr	r3, [pc, #172]	; (80009f4 <HAL_SPI_MspInit+0xd4>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	4a2a      	ldr	r2, [pc, #168]	; (80009f4 <HAL_SPI_MspInit+0xd4>)
 800094c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000950:	6413      	str	r3, [r2, #64]	; 0x40
 8000952:	4b28      	ldr	r3, [pc, #160]	; (80009f4 <HAL_SPI_MspInit+0xd4>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	4b24      	ldr	r3, [pc, #144]	; (80009f4 <HAL_SPI_MspInit+0xd4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a23      	ldr	r2, [pc, #140]	; (80009f4 <HAL_SPI_MspInit+0xd4>)
 8000968:	f043 0304 	orr.w	r3, r3, #4
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <HAL_SPI_MspInit+0xd4>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0304 	and.w	r3, r3, #4
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <HAL_SPI_MspInit+0xd4>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a1c      	ldr	r2, [pc, #112]	; (80009f4 <HAL_SPI_MspInit+0xd4>)
 8000984:	f043 0302 	orr.w	r3, r3, #2
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <HAL_SPI_MspInit+0xd4>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000996:	230c      	movs	r3, #12
 8000998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a2:	2303      	movs	r3, #3
 80009a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009a6:	2305      	movs	r3, #5
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	4619      	mov	r1, r3
 80009b0:	4811      	ldr	r0, [pc, #68]	; (80009f8 <HAL_SPI_MspInit+0xd8>)
 80009b2:	f000 fe85 	bl	80016c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c4:	2303      	movs	r3, #3
 80009c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009c8:	2305      	movs	r3, #5
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4619      	mov	r1, r3
 80009d2:	480a      	ldr	r0, [pc, #40]	; (80009fc <HAL_SPI_MspInit+0xdc>)
 80009d4:	f000 fe74 	bl	80016c0 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80009d8:	2200      	movs	r2, #0
 80009da:	2100      	movs	r1, #0
 80009dc:	2024      	movs	r0, #36	; 0x24
 80009de:	f000 faa0 	bl	8000f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80009e2:	2024      	movs	r0, #36	; 0x24
 80009e4:	f000 fab9 	bl	8000f5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80009e8:	bf00      	nop
 80009ea:	3728      	adds	r7, #40	; 0x28
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40003800 	.word	0x40003800
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40020800 	.word	0x40020800
 80009fc:	40020400 	.word	0x40020400

08000a00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08a      	sub	sp, #40	; 0x28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a4c      	ldr	r2, [pc, #304]	; (8000b50 <HAL_UART_MspInit+0x150>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	f040 8092 	bne.w	8000b48 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a24:	2300      	movs	r3, #0
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	4b4a      	ldr	r3, [pc, #296]	; (8000b54 <HAL_UART_MspInit+0x154>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	4a49      	ldr	r2, [pc, #292]	; (8000b54 <HAL_UART_MspInit+0x154>)
 8000a2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a32:	6413      	str	r3, [r2, #64]	; 0x40
 8000a34:	4b47      	ldr	r3, [pc, #284]	; (8000b54 <HAL_UART_MspInit+0x154>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a40:	2300      	movs	r3, #0
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	4b43      	ldr	r3, [pc, #268]	; (8000b54 <HAL_UART_MspInit+0x154>)
 8000a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a48:	4a42      	ldr	r2, [pc, #264]	; (8000b54 <HAL_UART_MspInit+0x154>)
 8000a4a:	f043 0301 	orr.w	r3, r3, #1
 8000a4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a50:	4b40      	ldr	r3, [pc, #256]	; (8000b54 <HAL_UART_MspInit+0x154>)
 8000a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a54:	f003 0301 	and.w	r3, r3, #1
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a5c:	230c      	movs	r3, #12
 8000a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a6c:	2307      	movs	r3, #7
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4619      	mov	r1, r3
 8000a76:	4838      	ldr	r0, [pc, #224]	; (8000b58 <HAL_UART_MspInit+0x158>)
 8000a78:	f000 fe22 	bl	80016c0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000a7c:	4b37      	ldr	r3, [pc, #220]	; (8000b5c <HAL_UART_MspInit+0x15c>)
 8000a7e:	4a38      	ldr	r2, [pc, #224]	; (8000b60 <HAL_UART_MspInit+0x160>)
 8000a80:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000a82:	4b36      	ldr	r3, [pc, #216]	; (8000b5c <HAL_UART_MspInit+0x15c>)
 8000a84:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a88:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a8a:	4b34      	ldr	r3, [pc, #208]	; (8000b5c <HAL_UART_MspInit+0x15c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a90:	4b32      	ldr	r3, [pc, #200]	; (8000b5c <HAL_UART_MspInit+0x15c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a96:	4b31      	ldr	r3, [pc, #196]	; (8000b5c <HAL_UART_MspInit+0x15c>)
 8000a98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a9c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a9e:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_UART_MspInit+0x15c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000aa4:	4b2d      	ldr	r3, [pc, #180]	; (8000b5c <HAL_UART_MspInit+0x15c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000aaa:	4b2c      	ldr	r3, [pc, #176]	; (8000b5c <HAL_UART_MspInit+0x15c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000ab0:	4b2a      	ldr	r3, [pc, #168]	; (8000b5c <HAL_UART_MspInit+0x15c>)
 8000ab2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ab6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ab8:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_UART_MspInit+0x15c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000abe:	4827      	ldr	r0, [pc, #156]	; (8000b5c <HAL_UART_MspInit+0x15c>)
 8000ac0:	f000 fa82 	bl	8000fc8 <HAL_DMA_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000aca:	f7ff fed9 	bl	8000880 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a22      	ldr	r2, [pc, #136]	; (8000b5c <HAL_UART_MspInit+0x15c>)
 8000ad2:	639a      	str	r2, [r3, #56]	; 0x38
 8000ad4:	4a21      	ldr	r2, [pc, #132]	; (8000b5c <HAL_UART_MspInit+0x15c>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000ada:	4b22      	ldr	r3, [pc, #136]	; (8000b64 <HAL_UART_MspInit+0x164>)
 8000adc:	4a22      	ldr	r2, [pc, #136]	; (8000b68 <HAL_UART_MspInit+0x168>)
 8000ade:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000ae0:	4b20      	ldr	r3, [pc, #128]	; (8000b64 <HAL_UART_MspInit+0x164>)
 8000ae2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ae6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ae8:	4b1e      	ldr	r3, [pc, #120]	; (8000b64 <HAL_UART_MspInit+0x164>)
 8000aea:	2240      	movs	r2, #64	; 0x40
 8000aec:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aee:	4b1d      	ldr	r3, [pc, #116]	; (8000b64 <HAL_UART_MspInit+0x164>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000af4:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <HAL_UART_MspInit+0x164>)
 8000af6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000afa:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000afc:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <HAL_UART_MspInit+0x164>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <HAL_UART_MspInit+0x164>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000b08:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <HAL_UART_MspInit+0x164>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <HAL_UART_MspInit+0x164>)
 8000b10:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b14:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b16:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <HAL_UART_MspInit+0x164>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000b1c:	4811      	ldr	r0, [pc, #68]	; (8000b64 <HAL_UART_MspInit+0x164>)
 8000b1e:	f000 fa53 	bl	8000fc8 <HAL_DMA_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8000b28:	f7ff feaa 	bl	8000880 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a0d      	ldr	r2, [pc, #52]	; (8000b64 <HAL_UART_MspInit+0x164>)
 8000b30:	635a      	str	r2, [r3, #52]	; 0x34
 8000b32:	4a0c      	ldr	r2, [pc, #48]	; (8000b64 <HAL_UART_MspInit+0x164>)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	2026      	movs	r0, #38	; 0x26
 8000b3e:	f000 f9f0 	bl	8000f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b42:	2026      	movs	r0, #38	; 0x26
 8000b44:	f000 fa09 	bl	8000f5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b48:	bf00      	nop
 8000b4a:	3728      	adds	r7, #40	; 0x28
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40004400 	.word	0x40004400
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40020000 	.word	0x40020000
 8000b5c:	200000cc 	.word	0x200000cc
 8000b60:	40026088 	.word	0x40026088
 8000b64:	2000012c 	.word	0x2000012c
 8000b68:	400260a0 	.word	0x400260a0

08000b6c <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000b70:	e7fe      	b.n	8000b70 <NMI_Handler+0x4>

08000b72 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8000b76:	e7fe      	b.n	8000b76 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8000b7c:	e7fe      	b.n	8000b7c <MemManage_Handler+0x4>

08000b7e <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8000b82:	e7fe      	b.n	8000b82 <BusFault_Handler+0x4>

08000b84 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8000b88:	e7fe      	b.n	8000b88 <UsageFault_Handler+0x4>

08000b8a <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000bb8:	f000 f8b8 	bl	8000d2c <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <DMA1_Stream5_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles DMA1 stream5 global interrupt.
 */
void DMA1_Stream5_IRQHandler(void) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

	/* USER CODE END DMA1_Stream5_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000bc4:	4802      	ldr	r0, [pc, #8]	; (8000bd0 <DMA1_Stream5_IRQHandler+0x10>)
 8000bc6:	f000 fb3f 	bl	8001248 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

	/* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200000cc 	.word	0x200000cc

08000bd4 <DMA1_Stream6_IRQHandler>:

/**
 * @brief This function handles DMA1 stream6 global interrupt.
 */
void DMA1_Stream6_IRQHandler(void) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

	/* USER CODE END DMA1_Stream6_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000bd8:	4802      	ldr	r0, [pc, #8]	; (8000be4 <DMA1_Stream6_IRQHandler+0x10>)
 8000bda:	f000 fb35 	bl	8001248 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

	/* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	2000012c 	.word	0x2000012c

08000be8 <SPI2_IRQHandler>:

/**
 * @brief This function handles SPI2 global interrupt.
 */
void SPI2_IRQHandler(void) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
//	{
//		spi_flag_2 = 1;
//	}

	/* USER CODE END SPI2_IRQn 0 */
	HAL_SPI_IRQHandler(&hspi2);
 8000bec:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <SPI2_IRQHandler+0x10>)
 8000bee:	f001 fc93 	bl	8002518 <HAL_SPI_IRQHandler>
	/* USER CODE BEGIN SPI2_IRQn 1 */

	/* USER CODE END SPI2_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000030 	.word	0x20000030

08000bfc <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8000c00:	4802      	ldr	r0, [pc, #8]	; (8000c0c <USART2_IRQHandler+0x10>)
 8000c02:	f002 f80b 	bl	8002c1c <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000088 	.word	0x20000088

08000c10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <SystemInit+0x20>)
 8000c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c1a:	4a05      	ldr	r2, [pc, #20]	; (8000c30 <SystemInit+0x20>)
 8000c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c38:	480d      	ldr	r0, [pc, #52]	; (8000c70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c3a:	490e      	ldr	r1, [pc, #56]	; (8000c74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c3c:	4a0e      	ldr	r2, [pc, #56]	; (8000c78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c40:	e002      	b.n	8000c48 <LoopCopyDataInit>

08000c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c46:	3304      	adds	r3, #4

08000c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c4c:	d3f9      	bcc.n	8000c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4e:	4a0b      	ldr	r2, [pc, #44]	; (8000c7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c50:	4c0b      	ldr	r4, [pc, #44]	; (8000c80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c54:	e001      	b.n	8000c5a <LoopFillZerobss>

08000c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c58:	3204      	adds	r2, #4

08000c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c5c:	d3fb      	bcc.n	8000c56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c5e:	f7ff ffd7 	bl	8000c10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c62:	f002 fea1 	bl	80039a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c66:	f7ff fc61 	bl	800052c <main>
  bx  lr    
 8000c6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c74:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c78:	08003a48 	.word	0x08003a48
  ldr r2, =_sbss
 8000c7c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c80:	200001c4 	.word	0x200001c4

08000c84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c84:	e7fe      	b.n	8000c84 <ADC_IRQHandler>
	...

08000c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0d      	ldr	r2, [pc, #52]	; (8000cc8 <HAL_Init+0x40>)
 8000c92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c98:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <HAL_Init+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <HAL_Init+0x40>)
 8000c9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ca2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <HAL_Init+0x40>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a07      	ldr	r2, [pc, #28]	; (8000cc8 <HAL_Init+0x40>)
 8000caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb0:	2003      	movs	r0, #3
 8000cb2:	f000 f92b 	bl	8000f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cb6:	200f      	movs	r0, #15
 8000cb8:	f000 f808 	bl	8000ccc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cbc:	f7ff fde6 	bl	800088c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40023c00 	.word	0x40023c00

08000ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <HAL_InitTick+0x54>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <HAL_InitTick+0x58>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 f943 	bl	8000f76 <HAL_SYSTICK_Config>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e00e      	b.n	8000d18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2b0f      	cmp	r3, #15
 8000cfe:	d80a      	bhi.n	8000d16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d00:	2200      	movs	r2, #0
 8000d02:	6879      	ldr	r1, [r7, #4]
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	f000 f90b 	bl	8000f22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d0c:	4a06      	ldr	r2, [pc, #24]	; (8000d28 <HAL_InitTick+0x5c>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d12:	2300      	movs	r3, #0
 8000d14:	e000      	b.n	8000d18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000000 	.word	0x20000000
 8000d24:	20000008 	.word	0x20000008
 8000d28:	20000004 	.word	0x20000004

08000d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_IncTick+0x20>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_IncTick+0x24>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <HAL_IncTick+0x24>)
 8000d3e:	6013      	str	r3, [r2, #0]
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20000008 	.word	0x20000008
 8000d50:	200001c0 	.word	0x200001c0

08000d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return uwTick;
 8000d58:	4b03      	ldr	r3, [pc, #12]	; (8000d68 <HAL_GetTick+0x14>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	200001c0 	.word	0x200001c0

08000d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d88:	4013      	ands	r3, r2
 8000d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9e:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <__NVIC_SetPriorityGrouping+0x44>)
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	60d3      	str	r3, [r2, #12]
}
 8000da4:	bf00      	nop
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db8:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <__NVIC_GetPriorityGrouping+0x18>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	0a1b      	lsrs	r3, r3, #8
 8000dbe:	f003 0307 	and.w	r3, r3, #7
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	db0b      	blt.n	8000dfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	f003 021f 	and.w	r2, r3, #31
 8000de8:	4907      	ldr	r1, [pc, #28]	; (8000e08 <__NVIC_EnableIRQ+0x38>)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	095b      	lsrs	r3, r3, #5
 8000df0:	2001      	movs	r0, #1
 8000df2:	fa00 f202 	lsl.w	r2, r0, r2
 8000df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000e100 	.word	0xe000e100

08000e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	6039      	str	r1, [r7, #0]
 8000e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	db0a      	blt.n	8000e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	490c      	ldr	r1, [pc, #48]	; (8000e58 <__NVIC_SetPriority+0x4c>)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	0112      	lsls	r2, r2, #4
 8000e2c:	b2d2      	uxtb	r2, r2
 8000e2e:	440b      	add	r3, r1
 8000e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e34:	e00a      	b.n	8000e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4908      	ldr	r1, [pc, #32]	; (8000e5c <__NVIC_SetPriority+0x50>)
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	f003 030f 	and.w	r3, r3, #15
 8000e42:	3b04      	subs	r3, #4
 8000e44:	0112      	lsls	r2, r2, #4
 8000e46:	b2d2      	uxtb	r2, r2
 8000e48:	440b      	add	r3, r1
 8000e4a:	761a      	strb	r2, [r3, #24]
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000e100 	.word	0xe000e100
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b089      	sub	sp, #36	; 0x24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	f1c3 0307 	rsb	r3, r3, #7
 8000e7a:	2b04      	cmp	r3, #4
 8000e7c:	bf28      	it	cs
 8000e7e:	2304      	movcs	r3, #4
 8000e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3304      	adds	r3, #4
 8000e86:	2b06      	cmp	r3, #6
 8000e88:	d902      	bls.n	8000e90 <NVIC_EncodePriority+0x30>
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3b03      	subs	r3, #3
 8000e8e:	e000      	b.n	8000e92 <NVIC_EncodePriority+0x32>
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	f04f 32ff 	mov.w	r2, #4294967295
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43da      	mvns	r2, r3
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	401a      	ands	r2, r3
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb2:	43d9      	mvns	r1, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb8:	4313      	orrs	r3, r2
         );
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3724      	adds	r7, #36	; 0x24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
	...

08000ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ed8:	d301      	bcc.n	8000ede <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eda:	2301      	movs	r3, #1
 8000edc:	e00f      	b.n	8000efe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <SysTick_Config+0x40>)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ee6:	210f      	movs	r1, #15
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eec:	f7ff ff8e 	bl	8000e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <SysTick_Config+0x40>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef6:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <SysTick_Config+0x40>)
 8000ef8:	2207      	movs	r2, #7
 8000efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	e000e010 	.word	0xe000e010

08000f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff ff29 	bl	8000d6c <__NVIC_SetPriorityGrouping>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b086      	sub	sp, #24
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	4603      	mov	r3, r0
 8000f2a:	60b9      	str	r1, [r7, #8]
 8000f2c:	607a      	str	r2, [r7, #4]
 8000f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f34:	f7ff ff3e 	bl	8000db4 <__NVIC_GetPriorityGrouping>
 8000f38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	68b9      	ldr	r1, [r7, #8]
 8000f3e:	6978      	ldr	r0, [r7, #20]
 8000f40:	f7ff ff8e 	bl	8000e60 <NVIC_EncodePriority>
 8000f44:	4602      	mov	r2, r0
 8000f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff5d 	bl	8000e0c <__NVIC_SetPriority>
}
 8000f52:	bf00      	nop
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	4603      	mov	r3, r0
 8000f62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff31 	bl	8000dd0 <__NVIC_EnableIRQ>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff ffa2 	bl	8000ec8 <SysTick_Config>
 8000f84:	4603      	mov	r3, r0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d101      	bne.n	8000fa0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e00e      	b.n	8000fbe <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	795b      	ldrb	r3, [r3, #5]
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d105      	bne.n	8000fb6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff fc93 	bl	80008dc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000fd4:	f7ff febe 	bl	8000d54 <HAL_GetTick>
 8000fd8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d101      	bne.n	8000fe4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e099      	b.n	8001118 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f022 0201 	bic.w	r2, r2, #1
 8001002:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001004:	e00f      	b.n	8001026 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001006:	f7ff fea5 	bl	8000d54 <HAL_GetTick>
 800100a:	4602      	mov	r2, r0
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	2b05      	cmp	r3, #5
 8001012:	d908      	bls.n	8001026 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2220      	movs	r2, #32
 8001018:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2203      	movs	r2, #3
 800101e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e078      	b.n	8001118 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1e8      	bne.n	8001006 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	4b38      	ldr	r3, [pc, #224]	; (8001120 <HAL_DMA_Init+0x158>)
 8001040:	4013      	ands	r3, r2
 8001042:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001052:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	691b      	ldr	r3, [r3, #16]
 8001058:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800105e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800106a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6a1b      	ldr	r3, [r3, #32]
 8001070:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	4313      	orrs	r3, r2
 8001076:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107c:	2b04      	cmp	r3, #4
 800107e:	d107      	bne.n	8001090 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001088:	4313      	orrs	r3, r2
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	4313      	orrs	r3, r2
 800108e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	697a      	ldr	r2, [r7, #20]
 8001096:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	f023 0307 	bic.w	r3, r3, #7
 80010a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	d117      	bne.n	80010ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d00e      	beq.n	80010ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f000 fa7b 	bl	80015c8 <DMA_CheckFifoParam>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d008      	beq.n	80010ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2240      	movs	r2, #64	; 0x40
 80010dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2201      	movs	r2, #1
 80010e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80010e6:	2301      	movs	r3, #1
 80010e8:	e016      	b.n	8001118 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f000 fa32 	bl	800155c <DMA_CalcBaseAndBitshift>
 80010f8:	4603      	mov	r3, r0
 80010fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001100:	223f      	movs	r2, #63	; 0x3f
 8001102:	409a      	lsls	r2, r3
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2201      	movs	r2, #1
 8001112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001116:	2300      	movs	r3, #0
}
 8001118:	4618      	mov	r0, r3
 800111a:	3718      	adds	r7, #24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	f010803f 	.word	0xf010803f

08001124 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001130:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001132:	f7ff fe0f 	bl	8000d54 <HAL_GetTick>
 8001136:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d008      	beq.n	8001156 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2280      	movs	r2, #128	; 0x80
 8001148:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e052      	b.n	80011fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f022 0216 	bic.w	r2, r2, #22
 8001164:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	695a      	ldr	r2, [r3, #20]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001174:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	2b00      	cmp	r3, #0
 800117c:	d103      	bne.n	8001186 <HAL_DMA_Abort+0x62>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001182:	2b00      	cmp	r3, #0
 8001184:	d007      	beq.n	8001196 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f022 0208 	bic.w	r2, r2, #8
 8001194:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f022 0201 	bic.w	r2, r2, #1
 80011a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011a6:	e013      	b.n	80011d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011a8:	f7ff fdd4 	bl	8000d54 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b05      	cmp	r3, #5
 80011b4:	d90c      	bls.n	80011d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2220      	movs	r2, #32
 80011ba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2203      	movs	r2, #3
 80011c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e015      	b.n	80011fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1e4      	bne.n	80011a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011e2:	223f      	movs	r2, #63	; 0x3f
 80011e4:	409a      	lsls	r2, r3
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2201      	movs	r2, #1
 80011ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d004      	beq.n	8001222 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2280      	movs	r2, #128	; 0x80
 800121c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e00c      	b.n	800123c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2205      	movs	r2, #5
 8001226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f022 0201 	bic.w	r2, r2, #1
 8001238:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001250:	2300      	movs	r3, #0
 8001252:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001254:	4b8e      	ldr	r3, [pc, #568]	; (8001490 <HAL_DMA_IRQHandler+0x248>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a8e      	ldr	r2, [pc, #568]	; (8001494 <HAL_DMA_IRQHandler+0x24c>)
 800125a:	fba2 2303 	umull	r2, r3, r2, r3
 800125e:	0a9b      	lsrs	r3, r3, #10
 8001260:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001266:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001272:	2208      	movs	r2, #8
 8001274:	409a      	lsls	r2, r3
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	4013      	ands	r3, r2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d01a      	beq.n	80012b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0304 	and.w	r3, r3, #4
 8001288:	2b00      	cmp	r3, #0
 800128a:	d013      	beq.n	80012b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f022 0204 	bic.w	r2, r2, #4
 800129a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a0:	2208      	movs	r2, #8
 80012a2:	409a      	lsls	r2, r3
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ac:	f043 0201 	orr.w	r2, r3, #1
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012b8:	2201      	movs	r2, #1
 80012ba:	409a      	lsls	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4013      	ands	r3, r2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d012      	beq.n	80012ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d00b      	beq.n	80012ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012d6:	2201      	movs	r2, #1
 80012d8:	409a      	lsls	r2, r3
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e2:	f043 0202 	orr.w	r2, r3, #2
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ee:	2204      	movs	r2, #4
 80012f0:	409a      	lsls	r2, r3
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4013      	ands	r3, r2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d012      	beq.n	8001320 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d00b      	beq.n	8001320 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800130c:	2204      	movs	r2, #4
 800130e:	409a      	lsls	r2, r3
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001318:	f043 0204 	orr.w	r2, r3, #4
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001324:	2210      	movs	r2, #16
 8001326:	409a      	lsls	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4013      	ands	r3, r2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d043      	beq.n	80013b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	2b00      	cmp	r3, #0
 800133c:	d03c      	beq.n	80013b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001342:	2210      	movs	r2, #16
 8001344:	409a      	lsls	r2, r3
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d018      	beq.n	800138a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d108      	bne.n	8001378 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	2b00      	cmp	r3, #0
 800136c:	d024      	beq.n	80013b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	4798      	blx	r3
 8001376:	e01f      	b.n	80013b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800137c:	2b00      	cmp	r3, #0
 800137e:	d01b      	beq.n	80013b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	4798      	blx	r3
 8001388:	e016      	b.n	80013b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001394:	2b00      	cmp	r3, #0
 8001396:	d107      	bne.n	80013a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 0208 	bic.w	r2, r2, #8
 80013a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013bc:	2220      	movs	r2, #32
 80013be:	409a      	lsls	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4013      	ands	r3, r2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f000 808f 	beq.w	80014e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0310 	and.w	r3, r3, #16
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 8087 	beq.w	80014e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013de:	2220      	movs	r2, #32
 80013e0:	409a      	lsls	r2, r3
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2b05      	cmp	r3, #5
 80013f0:	d136      	bne.n	8001460 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 0216 	bic.w	r2, r2, #22
 8001400:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	695a      	ldr	r2, [r3, #20]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001410:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	2b00      	cmp	r3, #0
 8001418:	d103      	bne.n	8001422 <HAL_DMA_IRQHandler+0x1da>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800141e:	2b00      	cmp	r3, #0
 8001420:	d007      	beq.n	8001432 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 0208 	bic.w	r2, r2, #8
 8001430:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001436:	223f      	movs	r2, #63	; 0x3f
 8001438:	409a      	lsls	r2, r3
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2201      	movs	r2, #1
 8001442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001452:	2b00      	cmp	r3, #0
 8001454:	d07e      	beq.n	8001554 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	4798      	blx	r3
        }
        return;
 800145e:	e079      	b.n	8001554 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d01d      	beq.n	80014aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d10d      	bne.n	8001498 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001480:	2b00      	cmp	r3, #0
 8001482:	d031      	beq.n	80014e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	4798      	blx	r3
 800148c:	e02c      	b.n	80014e8 <HAL_DMA_IRQHandler+0x2a0>
 800148e:	bf00      	nop
 8001490:	20000000 	.word	0x20000000
 8001494:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800149c:	2b00      	cmp	r3, #0
 800149e:	d023      	beq.n	80014e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	4798      	blx	r3
 80014a8:	e01e      	b.n	80014e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d10f      	bne.n	80014d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 0210 	bic.w	r2, r2, #16
 80014c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2201      	movs	r2, #1
 80014cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d032      	beq.n	8001556 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d022      	beq.n	8001542 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2205      	movs	r2, #5
 8001500:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 0201 	bic.w	r2, r2, #1
 8001512:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	3301      	adds	r3, #1
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	697a      	ldr	r2, [r7, #20]
 800151c:	429a      	cmp	r2, r3
 800151e:	d307      	bcc.n	8001530 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f2      	bne.n	8001514 <HAL_DMA_IRQHandler+0x2cc>
 800152e:	e000      	b.n	8001532 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001530:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2201      	movs	r2, #1
 8001536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001546:	2b00      	cmp	r3, #0
 8001548:	d005      	beq.n	8001556 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	4798      	blx	r3
 8001552:	e000      	b.n	8001556 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001554:	bf00      	nop
    }
  }
}
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	3b10      	subs	r3, #16
 800156c:	4a14      	ldr	r2, [pc, #80]	; (80015c0 <DMA_CalcBaseAndBitshift+0x64>)
 800156e:	fba2 2303 	umull	r2, r3, r2, r3
 8001572:	091b      	lsrs	r3, r3, #4
 8001574:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001576:	4a13      	ldr	r2, [pc, #76]	; (80015c4 <DMA_CalcBaseAndBitshift+0x68>)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4413      	add	r3, r2
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	461a      	mov	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2b03      	cmp	r3, #3
 8001588:	d909      	bls.n	800159e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001592:	f023 0303 	bic.w	r3, r3, #3
 8001596:	1d1a      	adds	r2, r3, #4
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	659a      	str	r2, [r3, #88]	; 0x58
 800159c:	e007      	b.n	80015ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80015a6:	f023 0303 	bic.w	r3, r3, #3
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	aaaaaaab 	.word	0xaaaaaaab
 80015c4:	08003a30 	.word	0x08003a30

080015c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015d0:	2300      	movs	r3, #0
 80015d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d11f      	bne.n	8001622 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	d856      	bhi.n	8001696 <DMA_CheckFifoParam+0xce>
 80015e8:	a201      	add	r2, pc, #4	; (adr r2, 80015f0 <DMA_CheckFifoParam+0x28>)
 80015ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ee:	bf00      	nop
 80015f0:	08001601 	.word	0x08001601
 80015f4:	08001613 	.word	0x08001613
 80015f8:	08001601 	.word	0x08001601
 80015fc:	08001697 	.word	0x08001697
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001604:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d046      	beq.n	800169a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001610:	e043      	b.n	800169a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001616:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800161a:	d140      	bne.n	800169e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001620:	e03d      	b.n	800169e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800162a:	d121      	bne.n	8001670 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	2b03      	cmp	r3, #3
 8001630:	d837      	bhi.n	80016a2 <DMA_CheckFifoParam+0xda>
 8001632:	a201      	add	r2, pc, #4	; (adr r2, 8001638 <DMA_CheckFifoParam+0x70>)
 8001634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001638:	08001649 	.word	0x08001649
 800163c:	0800164f 	.word	0x0800164f
 8001640:	08001649 	.word	0x08001649
 8001644:	08001661 	.word	0x08001661
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	73fb      	strb	r3, [r7, #15]
      break;
 800164c:	e030      	b.n	80016b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001652:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d025      	beq.n	80016a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800165e:	e022      	b.n	80016a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001664:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001668:	d11f      	bne.n	80016aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800166e:	e01c      	b.n	80016aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d903      	bls.n	800167e <DMA_CheckFifoParam+0xb6>
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	2b03      	cmp	r3, #3
 800167a:	d003      	beq.n	8001684 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800167c:	e018      	b.n	80016b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	73fb      	strb	r3, [r7, #15]
      break;
 8001682:	e015      	b.n	80016b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001688:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d00e      	beq.n	80016ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	73fb      	strb	r3, [r7, #15]
      break;
 8001694:	e00b      	b.n	80016ae <DMA_CheckFifoParam+0xe6>
      break;
 8001696:	bf00      	nop
 8001698:	e00a      	b.n	80016b0 <DMA_CheckFifoParam+0xe8>
      break;
 800169a:	bf00      	nop
 800169c:	e008      	b.n	80016b0 <DMA_CheckFifoParam+0xe8>
      break;
 800169e:	bf00      	nop
 80016a0:	e006      	b.n	80016b0 <DMA_CheckFifoParam+0xe8>
      break;
 80016a2:	bf00      	nop
 80016a4:	e004      	b.n	80016b0 <DMA_CheckFifoParam+0xe8>
      break;
 80016a6:	bf00      	nop
 80016a8:	e002      	b.n	80016b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80016aa:	bf00      	nop
 80016ac:	e000      	b.n	80016b0 <DMA_CheckFifoParam+0xe8>
      break;
 80016ae:	bf00      	nop
    }
  } 
  
  return status; 
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop

080016c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b089      	sub	sp, #36	; 0x24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
 80016da:	e16b      	b.n	80019b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016dc:	2201      	movs	r2, #1
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	4013      	ands	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	f040 815a 	bne.w	80019ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f003 0303 	and.w	r3, r3, #3
 8001702:	2b01      	cmp	r3, #1
 8001704:	d005      	beq.n	8001712 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800170e:	2b02      	cmp	r3, #2
 8001710:	d130      	bne.n	8001774 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	2203      	movs	r2, #3
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43db      	mvns	r3, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4013      	ands	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	68da      	ldr	r2, [r3, #12]
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4313      	orrs	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001748:	2201      	movs	r2, #1
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	091b      	lsrs	r3, r3, #4
 800175e:	f003 0201 	and.w	r2, r3, #1
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	2b03      	cmp	r3, #3
 800177e:	d017      	beq.n	80017b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	2203      	movs	r2, #3
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 0303 	and.w	r3, r3, #3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d123      	bne.n	8001804 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	08da      	lsrs	r2, r3, #3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3208      	adds	r2, #8
 80017c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	f003 0307 	and.w	r3, r3, #7
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	220f      	movs	r2, #15
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	691a      	ldr	r2, [r3, #16]
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	08da      	lsrs	r2, r3, #3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3208      	adds	r2, #8
 80017fe:	69b9      	ldr	r1, [r7, #24]
 8001800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	2203      	movs	r2, #3
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 0203 	and.w	r2, r3, #3
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 80b4 	beq.w	80019ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	4b60      	ldr	r3, [pc, #384]	; (80019cc <HAL_GPIO_Init+0x30c>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	4a5f      	ldr	r2, [pc, #380]	; (80019cc <HAL_GPIO_Init+0x30c>)
 8001850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001854:	6453      	str	r3, [r2, #68]	; 0x44
 8001856:	4b5d      	ldr	r3, [pc, #372]	; (80019cc <HAL_GPIO_Init+0x30c>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001862:	4a5b      	ldr	r2, [pc, #364]	; (80019d0 <HAL_GPIO_Init+0x310>)
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	089b      	lsrs	r3, r3, #2
 8001868:	3302      	adds	r3, #2
 800186a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800186e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	220f      	movs	r2, #15
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4013      	ands	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a52      	ldr	r2, [pc, #328]	; (80019d4 <HAL_GPIO_Init+0x314>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d02b      	beq.n	80018e6 <HAL_GPIO_Init+0x226>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a51      	ldr	r2, [pc, #324]	; (80019d8 <HAL_GPIO_Init+0x318>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d025      	beq.n	80018e2 <HAL_GPIO_Init+0x222>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a50      	ldr	r2, [pc, #320]	; (80019dc <HAL_GPIO_Init+0x31c>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d01f      	beq.n	80018de <HAL_GPIO_Init+0x21e>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a4f      	ldr	r2, [pc, #316]	; (80019e0 <HAL_GPIO_Init+0x320>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d019      	beq.n	80018da <HAL_GPIO_Init+0x21a>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a4e      	ldr	r2, [pc, #312]	; (80019e4 <HAL_GPIO_Init+0x324>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d013      	beq.n	80018d6 <HAL_GPIO_Init+0x216>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a4d      	ldr	r2, [pc, #308]	; (80019e8 <HAL_GPIO_Init+0x328>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d00d      	beq.n	80018d2 <HAL_GPIO_Init+0x212>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a4c      	ldr	r2, [pc, #304]	; (80019ec <HAL_GPIO_Init+0x32c>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d007      	beq.n	80018ce <HAL_GPIO_Init+0x20e>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a4b      	ldr	r2, [pc, #300]	; (80019f0 <HAL_GPIO_Init+0x330>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d101      	bne.n	80018ca <HAL_GPIO_Init+0x20a>
 80018c6:	2307      	movs	r3, #7
 80018c8:	e00e      	b.n	80018e8 <HAL_GPIO_Init+0x228>
 80018ca:	2308      	movs	r3, #8
 80018cc:	e00c      	b.n	80018e8 <HAL_GPIO_Init+0x228>
 80018ce:	2306      	movs	r3, #6
 80018d0:	e00a      	b.n	80018e8 <HAL_GPIO_Init+0x228>
 80018d2:	2305      	movs	r3, #5
 80018d4:	e008      	b.n	80018e8 <HAL_GPIO_Init+0x228>
 80018d6:	2304      	movs	r3, #4
 80018d8:	e006      	b.n	80018e8 <HAL_GPIO_Init+0x228>
 80018da:	2303      	movs	r3, #3
 80018dc:	e004      	b.n	80018e8 <HAL_GPIO_Init+0x228>
 80018de:	2302      	movs	r3, #2
 80018e0:	e002      	b.n	80018e8 <HAL_GPIO_Init+0x228>
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <HAL_GPIO_Init+0x228>
 80018e6:	2300      	movs	r3, #0
 80018e8:	69fa      	ldr	r2, [r7, #28]
 80018ea:	f002 0203 	and.w	r2, r2, #3
 80018ee:	0092      	lsls	r2, r2, #2
 80018f0:	4093      	lsls	r3, r2
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018f8:	4935      	ldr	r1, [pc, #212]	; (80019d0 <HAL_GPIO_Init+0x310>)
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	089b      	lsrs	r3, r3, #2
 80018fe:	3302      	adds	r3, #2
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001906:	4b3b      	ldr	r3, [pc, #236]	; (80019f4 <HAL_GPIO_Init+0x334>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	4313      	orrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800192a:	4a32      	ldr	r2, [pc, #200]	; (80019f4 <HAL_GPIO_Init+0x334>)
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001930:	4b30      	ldr	r3, [pc, #192]	; (80019f4 <HAL_GPIO_Init+0x334>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	43db      	mvns	r3, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4013      	ands	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	4313      	orrs	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001954:	4a27      	ldr	r2, [pc, #156]	; (80019f4 <HAL_GPIO_Init+0x334>)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800195a:	4b26      	ldr	r3, [pc, #152]	; (80019f4 <HAL_GPIO_Init+0x334>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	43db      	mvns	r3, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4013      	ands	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800197e:	4a1d      	ldr	r2, [pc, #116]	; (80019f4 <HAL_GPIO_Init+0x334>)
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001984:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <HAL_GPIO_Init+0x334>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019a8:	4a12      	ldr	r2, [pc, #72]	; (80019f4 <HAL_GPIO_Init+0x334>)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3301      	adds	r3, #1
 80019b2:	61fb      	str	r3, [r7, #28]
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	2b0f      	cmp	r3, #15
 80019b8:	f67f ae90 	bls.w	80016dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019bc:	bf00      	nop
 80019be:	bf00      	nop
 80019c0:	3724      	adds	r7, #36	; 0x24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40013800 	.word	0x40013800
 80019d4:	40020000 	.word	0x40020000
 80019d8:	40020400 	.word	0x40020400
 80019dc:	40020800 	.word	0x40020800
 80019e0:	40020c00 	.word	0x40020c00
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40021400 	.word	0x40021400
 80019ec:	40021800 	.word	0x40021800
 80019f0:	40021c00 	.word	0x40021c00
 80019f4:	40013c00 	.word	0x40013c00

080019f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	460b      	mov	r3, r1
 8001a02:	807b      	strh	r3, [r7, #2]
 8001a04:	4613      	mov	r3, r2
 8001a06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a08:	787b      	ldrb	r3, [r7, #1]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a0e:	887a      	ldrh	r2, [r7, #2]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a14:	e003      	b.n	8001a1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a16:	887b      	ldrh	r3, [r7, #2]
 8001a18:	041a      	lsls	r2, r3, #16
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	619a      	str	r2, [r3, #24]
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
	...

08001a2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e267      	b.n	8001f0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d075      	beq.n	8001b36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a4a:	4b88      	ldr	r3, [pc, #544]	; (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f003 030c 	and.w	r3, r3, #12
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	d00c      	beq.n	8001a70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a56:	4b85      	ldr	r3, [pc, #532]	; (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a5e:	2b08      	cmp	r3, #8
 8001a60:	d112      	bne.n	8001a88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a62:	4b82      	ldr	r3, [pc, #520]	; (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a6e:	d10b      	bne.n	8001a88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a70:	4b7e      	ldr	r3, [pc, #504]	; (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d05b      	beq.n	8001b34 <HAL_RCC_OscConfig+0x108>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d157      	bne.n	8001b34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e242      	b.n	8001f0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a90:	d106      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x74>
 8001a92:	4b76      	ldr	r3, [pc, #472]	; (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a75      	ldr	r2, [pc, #468]	; (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a9c:	6013      	str	r3, [r2, #0]
 8001a9e:	e01d      	b.n	8001adc <HAL_RCC_OscConfig+0xb0>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aa8:	d10c      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x98>
 8001aaa:	4b70      	ldr	r3, [pc, #448]	; (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a6f      	ldr	r2, [pc, #444]	; (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	4b6d      	ldr	r3, [pc, #436]	; (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a6c      	ldr	r2, [pc, #432]	; (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	e00b      	b.n	8001adc <HAL_RCC_OscConfig+0xb0>
 8001ac4:	4b69      	ldr	r3, [pc, #420]	; (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a68      	ldr	r2, [pc, #416]	; (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	4b66      	ldr	r3, [pc, #408]	; (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a65      	ldr	r2, [pc, #404]	; (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ada:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d013      	beq.n	8001b0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae4:	f7ff f936 	bl	8000d54 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aec:	f7ff f932 	bl	8000d54 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b64      	cmp	r3, #100	; 0x64
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e207      	b.n	8001f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afe:	4b5b      	ldr	r3, [pc, #364]	; (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0f0      	beq.n	8001aec <HAL_RCC_OscConfig+0xc0>
 8001b0a:	e014      	b.n	8001b36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0c:	f7ff f922 	bl	8000d54 <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b14:	f7ff f91e 	bl	8000d54 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b64      	cmp	r3, #100	; 0x64
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e1f3      	b.n	8001f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b26:	4b51      	ldr	r3, [pc, #324]	; (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f0      	bne.n	8001b14 <HAL_RCC_OscConfig+0xe8>
 8001b32:	e000      	b.n	8001b36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d063      	beq.n	8001c0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b42:	4b4a      	ldr	r3, [pc, #296]	; (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 030c 	and.w	r3, r3, #12
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00b      	beq.n	8001b66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b4e:	4b47      	ldr	r3, [pc, #284]	; (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b56:	2b08      	cmp	r3, #8
 8001b58:	d11c      	bne.n	8001b94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b5a:	4b44      	ldr	r3, [pc, #272]	; (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d116      	bne.n	8001b94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b66:	4b41      	ldr	r3, [pc, #260]	; (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d005      	beq.n	8001b7e <HAL_RCC_OscConfig+0x152>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d001      	beq.n	8001b7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e1c7      	b.n	8001f0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b7e:	4b3b      	ldr	r3, [pc, #236]	; (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	4937      	ldr	r1, [pc, #220]	; (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b92:	e03a      	b.n	8001c0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d020      	beq.n	8001bde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b9c:	4b34      	ldr	r3, [pc, #208]	; (8001c70 <HAL_RCC_OscConfig+0x244>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba2:	f7ff f8d7 	bl	8000d54 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001baa:	f7ff f8d3 	bl	8000d54 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e1a8      	b.n	8001f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bbc:	4b2b      	ldr	r3, [pc, #172]	; (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0f0      	beq.n	8001baa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc8:	4b28      	ldr	r3, [pc, #160]	; (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	4925      	ldr	r1, [pc, #148]	; (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	600b      	str	r3, [r1, #0]
 8001bdc:	e015      	b.n	8001c0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bde:	4b24      	ldr	r3, [pc, #144]	; (8001c70 <HAL_RCC_OscConfig+0x244>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be4:	f7ff f8b6 	bl	8000d54 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bec:	f7ff f8b2 	bl	8000d54 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e187      	b.n	8001f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfe:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f0      	bne.n	8001bec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d036      	beq.n	8001c84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d016      	beq.n	8001c4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c1e:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <HAL_RCC_OscConfig+0x248>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c24:	f7ff f896 	bl	8000d54 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c2c:	f7ff f892 	bl	8000d54 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e167      	b.n	8001f0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <HAL_RCC_OscConfig+0x240>)
 8001c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0f0      	beq.n	8001c2c <HAL_RCC_OscConfig+0x200>
 8001c4a:	e01b      	b.n	8001c84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c4c:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <HAL_RCC_OscConfig+0x248>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c52:	f7ff f87f 	bl	8000d54 <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c58:	e00e      	b.n	8001c78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c5a:	f7ff f87b 	bl	8000d54 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d907      	bls.n	8001c78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e150      	b.n	8001f0e <HAL_RCC_OscConfig+0x4e2>
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	42470000 	.word	0x42470000
 8001c74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c78:	4b88      	ldr	r3, [pc, #544]	; (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1ea      	bne.n	8001c5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 8097 	beq.w	8001dc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c92:	2300      	movs	r3, #0
 8001c94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c96:	4b81      	ldr	r3, [pc, #516]	; (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10f      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60bb      	str	r3, [r7, #8]
 8001ca6:	4b7d      	ldr	r3, [pc, #500]	; (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	4a7c      	ldr	r2, [pc, #496]	; (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb2:	4b7a      	ldr	r3, [pc, #488]	; (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc2:	4b77      	ldr	r3, [pc, #476]	; (8001ea0 <HAL_RCC_OscConfig+0x474>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d118      	bne.n	8001d00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cce:	4b74      	ldr	r3, [pc, #464]	; (8001ea0 <HAL_RCC_OscConfig+0x474>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a73      	ldr	r2, [pc, #460]	; (8001ea0 <HAL_RCC_OscConfig+0x474>)
 8001cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cda:	f7ff f83b 	bl	8000d54 <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce2:	f7ff f837 	bl	8000d54 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e10c      	b.n	8001f0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf4:	4b6a      	ldr	r3, [pc, #424]	; (8001ea0 <HAL_RCC_OscConfig+0x474>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0f0      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d106      	bne.n	8001d16 <HAL_RCC_OscConfig+0x2ea>
 8001d08:	4b64      	ldr	r3, [pc, #400]	; (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0c:	4a63      	ldr	r2, [pc, #396]	; (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	6713      	str	r3, [r2, #112]	; 0x70
 8001d14:	e01c      	b.n	8001d50 <HAL_RCC_OscConfig+0x324>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	2b05      	cmp	r3, #5
 8001d1c:	d10c      	bne.n	8001d38 <HAL_RCC_OscConfig+0x30c>
 8001d1e:	4b5f      	ldr	r3, [pc, #380]	; (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d22:	4a5e      	ldr	r2, [pc, #376]	; (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001d24:	f043 0304 	orr.w	r3, r3, #4
 8001d28:	6713      	str	r3, [r2, #112]	; 0x70
 8001d2a:	4b5c      	ldr	r3, [pc, #368]	; (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2e:	4a5b      	ldr	r2, [pc, #364]	; (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6713      	str	r3, [r2, #112]	; 0x70
 8001d36:	e00b      	b.n	8001d50 <HAL_RCC_OscConfig+0x324>
 8001d38:	4b58      	ldr	r3, [pc, #352]	; (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3c:	4a57      	ldr	r2, [pc, #348]	; (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001d3e:	f023 0301 	bic.w	r3, r3, #1
 8001d42:	6713      	str	r3, [r2, #112]	; 0x70
 8001d44:	4b55      	ldr	r3, [pc, #340]	; (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d48:	4a54      	ldr	r2, [pc, #336]	; (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001d4a:	f023 0304 	bic.w	r3, r3, #4
 8001d4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d015      	beq.n	8001d84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d58:	f7fe fffc 	bl	8000d54 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5e:	e00a      	b.n	8001d76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d60:	f7fe fff8 	bl	8000d54 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e0cb      	b.n	8001f0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d76:	4b49      	ldr	r3, [pc, #292]	; (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0ee      	beq.n	8001d60 <HAL_RCC_OscConfig+0x334>
 8001d82:	e014      	b.n	8001dae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d84:	f7fe ffe6 	bl	8000d54 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d8a:	e00a      	b.n	8001da2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d8c:	f7fe ffe2 	bl	8000d54 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e0b5      	b.n	8001f0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da2:	4b3e      	ldr	r3, [pc, #248]	; (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1ee      	bne.n	8001d8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dae:	7dfb      	ldrb	r3, [r7, #23]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d105      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db4:	4b39      	ldr	r3, [pc, #228]	; (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db8:	4a38      	ldr	r2, [pc, #224]	; (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001dba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dbe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 80a1 	beq.w	8001f0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dca:	4b34      	ldr	r3, [pc, #208]	; (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 030c 	and.w	r3, r3, #12
 8001dd2:	2b08      	cmp	r3, #8
 8001dd4:	d05c      	beq.n	8001e90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d141      	bne.n	8001e62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dde:	4b31      	ldr	r3, [pc, #196]	; (8001ea4 <HAL_RCC_OscConfig+0x478>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de4:	f7fe ffb6 	bl	8000d54 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dec:	f7fe ffb2 	bl	8000d54 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e087      	b.n	8001f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dfe:	4b27      	ldr	r3, [pc, #156]	; (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69da      	ldr	r2, [r3, #28]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	431a      	orrs	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e18:	019b      	lsls	r3, r3, #6
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e20:	085b      	lsrs	r3, r3, #1
 8001e22:	3b01      	subs	r3, #1
 8001e24:	041b      	lsls	r3, r3, #16
 8001e26:	431a      	orrs	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2c:	061b      	lsls	r3, r3, #24
 8001e2e:	491b      	ldr	r1, [pc, #108]	; (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e34:	4b1b      	ldr	r3, [pc, #108]	; (8001ea4 <HAL_RCC_OscConfig+0x478>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3a:	f7fe ff8b 	bl	8000d54 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e42:	f7fe ff87 	bl	8000d54 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e05c      	b.n	8001f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0f0      	beq.n	8001e42 <HAL_RCC_OscConfig+0x416>
 8001e60:	e054      	b.n	8001f0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e62:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <HAL_RCC_OscConfig+0x478>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e68:	f7fe ff74 	bl	8000d54 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e70:	f7fe ff70 	bl	8000d54 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e045      	b.n	8001f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e82:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <HAL_RCC_OscConfig+0x470>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1f0      	bne.n	8001e70 <HAL_RCC_OscConfig+0x444>
 8001e8e:	e03d      	b.n	8001f0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d107      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e038      	b.n	8001f0e <HAL_RCC_OscConfig+0x4e2>
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40007000 	.word	0x40007000
 8001ea4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ea8:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <HAL_RCC_OscConfig+0x4ec>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d028      	beq.n	8001f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d121      	bne.n	8001f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d11a      	bne.n	8001f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ed8:	4013      	ands	r3, r2
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ede:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d111      	bne.n	8001f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eee:	085b      	lsrs	r3, r3, #1
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d107      	bne.n	8001f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d001      	beq.n	8001f0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e000      	b.n	8001f0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3718      	adds	r7, #24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40023800 	.word	0x40023800

08001f1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e0cc      	b.n	80020ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f30:	4b68      	ldr	r3, [pc, #416]	; (80020d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d90c      	bls.n	8001f58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3e:	4b65      	ldr	r3, [pc, #404]	; (80020d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f46:	4b63      	ldr	r3, [pc, #396]	; (80020d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d001      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e0b8      	b.n	80020ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d020      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d005      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f70:	4b59      	ldr	r3, [pc, #356]	; (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	4a58      	ldr	r2, [pc, #352]	; (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0308 	and.w	r3, r3, #8
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d005      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f88:	4b53      	ldr	r3, [pc, #332]	; (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	4a52      	ldr	r2, [pc, #328]	; (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f94:	4b50      	ldr	r3, [pc, #320]	; (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	494d      	ldr	r1, [pc, #308]	; (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d044      	beq.n	800203c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d107      	bne.n	8001fca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fba:	4b47      	ldr	r3, [pc, #284]	; (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d119      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e07f      	b.n	80020ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d003      	beq.n	8001fda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fd6:	2b03      	cmp	r3, #3
 8001fd8:	d107      	bne.n	8001fea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fda:	4b3f      	ldr	r3, [pc, #252]	; (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d109      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e06f      	b.n	80020ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fea:	4b3b      	ldr	r3, [pc, #236]	; (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e067      	b.n	80020ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ffa:	4b37      	ldr	r3, [pc, #220]	; (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f023 0203 	bic.w	r2, r3, #3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	4934      	ldr	r1, [pc, #208]	; (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002008:	4313      	orrs	r3, r2
 800200a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800200c:	f7fe fea2 	bl	8000d54 <HAL_GetTick>
 8002010:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002012:	e00a      	b.n	800202a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002014:	f7fe fe9e 	bl	8000d54 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002022:	4293      	cmp	r3, r2
 8002024:	d901      	bls.n	800202a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e04f      	b.n	80020ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202a:	4b2b      	ldr	r3, [pc, #172]	; (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 020c 	and.w	r2, r3, #12
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	429a      	cmp	r2, r3
 800203a:	d1eb      	bne.n	8002014 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800203c:	4b25      	ldr	r3, [pc, #148]	; (80020d4 <HAL_RCC_ClockConfig+0x1b8>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	429a      	cmp	r2, r3
 8002048:	d20c      	bcs.n	8002064 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204a:	4b22      	ldr	r3, [pc, #136]	; (80020d4 <HAL_RCC_ClockConfig+0x1b8>)
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002052:	4b20      	ldr	r3, [pc, #128]	; (80020d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d001      	beq.n	8002064 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e032      	b.n	80020ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b00      	cmp	r3, #0
 800206e:	d008      	beq.n	8002082 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002070:	4b19      	ldr	r3, [pc, #100]	; (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	4916      	ldr	r1, [pc, #88]	; (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 800207e:	4313      	orrs	r3, r2
 8002080:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	2b00      	cmp	r3, #0
 800208c:	d009      	beq.n	80020a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800208e:	4b12      	ldr	r3, [pc, #72]	; (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	490e      	ldr	r1, [pc, #56]	; (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020a2:	f000 f821 	bl	80020e8 <HAL_RCC_GetSysClockFreq>
 80020a6:	4602      	mov	r2, r0
 80020a8:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	091b      	lsrs	r3, r3, #4
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	490a      	ldr	r1, [pc, #40]	; (80020dc <HAL_RCC_ClockConfig+0x1c0>)
 80020b4:	5ccb      	ldrb	r3, [r1, r3]
 80020b6:	fa22 f303 	lsr.w	r3, r2, r3
 80020ba:	4a09      	ldr	r2, [pc, #36]	; (80020e0 <HAL_RCC_ClockConfig+0x1c4>)
 80020bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020be:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <HAL_RCC_ClockConfig+0x1c8>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe fe02 	bl	8000ccc <HAL_InitTick>

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40023c00 	.word	0x40023c00
 80020d8:	40023800 	.word	0x40023800
 80020dc:	08003a18 	.word	0x08003a18
 80020e0:	20000000 	.word	0x20000000
 80020e4:	20000004 	.word	0x20000004

080020e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020ec:	b090      	sub	sp, #64	; 0x40
 80020ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020f0:	2300      	movs	r3, #0
 80020f2:	637b      	str	r3, [r7, #52]	; 0x34
 80020f4:	2300      	movs	r3, #0
 80020f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020f8:	2300      	movs	r3, #0
 80020fa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80020fc:	2300      	movs	r3, #0
 80020fe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002100:	4b59      	ldr	r3, [pc, #356]	; (8002268 <HAL_RCC_GetSysClockFreq+0x180>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 030c 	and.w	r3, r3, #12
 8002108:	2b08      	cmp	r3, #8
 800210a:	d00d      	beq.n	8002128 <HAL_RCC_GetSysClockFreq+0x40>
 800210c:	2b08      	cmp	r3, #8
 800210e:	f200 80a1 	bhi.w	8002254 <HAL_RCC_GetSysClockFreq+0x16c>
 8002112:	2b00      	cmp	r3, #0
 8002114:	d002      	beq.n	800211c <HAL_RCC_GetSysClockFreq+0x34>
 8002116:	2b04      	cmp	r3, #4
 8002118:	d003      	beq.n	8002122 <HAL_RCC_GetSysClockFreq+0x3a>
 800211a:	e09b      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800211c:	4b53      	ldr	r3, [pc, #332]	; (800226c <HAL_RCC_GetSysClockFreq+0x184>)
 800211e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002120:	e09b      	b.n	800225a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002122:	4b53      	ldr	r3, [pc, #332]	; (8002270 <HAL_RCC_GetSysClockFreq+0x188>)
 8002124:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002126:	e098      	b.n	800225a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002128:	4b4f      	ldr	r3, [pc, #316]	; (8002268 <HAL_RCC_GetSysClockFreq+0x180>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002130:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002132:	4b4d      	ldr	r3, [pc, #308]	; (8002268 <HAL_RCC_GetSysClockFreq+0x180>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d028      	beq.n	8002190 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800213e:	4b4a      	ldr	r3, [pc, #296]	; (8002268 <HAL_RCC_GetSysClockFreq+0x180>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	099b      	lsrs	r3, r3, #6
 8002144:	2200      	movs	r2, #0
 8002146:	623b      	str	r3, [r7, #32]
 8002148:	627a      	str	r2, [r7, #36]	; 0x24
 800214a:	6a3b      	ldr	r3, [r7, #32]
 800214c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002150:	2100      	movs	r1, #0
 8002152:	4b47      	ldr	r3, [pc, #284]	; (8002270 <HAL_RCC_GetSysClockFreq+0x188>)
 8002154:	fb03 f201 	mul.w	r2, r3, r1
 8002158:	2300      	movs	r3, #0
 800215a:	fb00 f303 	mul.w	r3, r0, r3
 800215e:	4413      	add	r3, r2
 8002160:	4a43      	ldr	r2, [pc, #268]	; (8002270 <HAL_RCC_GetSysClockFreq+0x188>)
 8002162:	fba0 1202 	umull	r1, r2, r0, r2
 8002166:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002168:	460a      	mov	r2, r1
 800216a:	62ba      	str	r2, [r7, #40]	; 0x28
 800216c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800216e:	4413      	add	r3, r2
 8002170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002174:	2200      	movs	r2, #0
 8002176:	61bb      	str	r3, [r7, #24]
 8002178:	61fa      	str	r2, [r7, #28]
 800217a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800217e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002182:	f7fe f821 	bl	80001c8 <__aeabi_uldivmod>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4613      	mov	r3, r2
 800218c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800218e:	e053      	b.n	8002238 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002190:	4b35      	ldr	r3, [pc, #212]	; (8002268 <HAL_RCC_GetSysClockFreq+0x180>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	099b      	lsrs	r3, r3, #6
 8002196:	2200      	movs	r2, #0
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	617a      	str	r2, [r7, #20]
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80021a2:	f04f 0b00 	mov.w	fp, #0
 80021a6:	4652      	mov	r2, sl
 80021a8:	465b      	mov	r3, fp
 80021aa:	f04f 0000 	mov.w	r0, #0
 80021ae:	f04f 0100 	mov.w	r1, #0
 80021b2:	0159      	lsls	r1, r3, #5
 80021b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021b8:	0150      	lsls	r0, r2, #5
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	ebb2 080a 	subs.w	r8, r2, sl
 80021c2:	eb63 090b 	sbc.w	r9, r3, fp
 80021c6:	f04f 0200 	mov.w	r2, #0
 80021ca:	f04f 0300 	mov.w	r3, #0
 80021ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80021d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80021d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80021da:	ebb2 0408 	subs.w	r4, r2, r8
 80021de:	eb63 0509 	sbc.w	r5, r3, r9
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	f04f 0300 	mov.w	r3, #0
 80021ea:	00eb      	lsls	r3, r5, #3
 80021ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021f0:	00e2      	lsls	r2, r4, #3
 80021f2:	4614      	mov	r4, r2
 80021f4:	461d      	mov	r5, r3
 80021f6:	eb14 030a 	adds.w	r3, r4, sl
 80021fa:	603b      	str	r3, [r7, #0]
 80021fc:	eb45 030b 	adc.w	r3, r5, fp
 8002200:	607b      	str	r3, [r7, #4]
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	f04f 0300 	mov.w	r3, #0
 800220a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800220e:	4629      	mov	r1, r5
 8002210:	028b      	lsls	r3, r1, #10
 8002212:	4621      	mov	r1, r4
 8002214:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002218:	4621      	mov	r1, r4
 800221a:	028a      	lsls	r2, r1, #10
 800221c:	4610      	mov	r0, r2
 800221e:	4619      	mov	r1, r3
 8002220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002222:	2200      	movs	r2, #0
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	60fa      	str	r2, [r7, #12]
 8002228:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800222c:	f7fd ffcc 	bl	80001c8 <__aeabi_uldivmod>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4613      	mov	r3, r2
 8002236:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <HAL_RCC_GetSysClockFreq+0x180>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	0c1b      	lsrs	r3, r3, #16
 800223e:	f003 0303 	and.w	r3, r3, #3
 8002242:	3301      	adds	r3, #1
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002248:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800224a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002250:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002252:	e002      	b.n	800225a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002254:	4b05      	ldr	r3, [pc, #20]	; (800226c <HAL_RCC_GetSysClockFreq+0x184>)
 8002256:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002258:	bf00      	nop
    }
  }
  return sysclockfreq;
 800225a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800225c:	4618      	mov	r0, r3
 800225e:	3740      	adds	r7, #64	; 0x40
 8002260:	46bd      	mov	sp, r7
 8002262:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002266:	bf00      	nop
 8002268:	40023800 	.word	0x40023800
 800226c:	00f42400 	.word	0x00f42400
 8002270:	017d7840 	.word	0x017d7840

08002274 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002278:	4b03      	ldr	r3, [pc, #12]	; (8002288 <HAL_RCC_GetHCLKFreq+0x14>)
 800227a:	681b      	ldr	r3, [r3, #0]
}
 800227c:	4618      	mov	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	20000000 	.word	0x20000000

0800228c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002290:	f7ff fff0 	bl	8002274 <HAL_RCC_GetHCLKFreq>
 8002294:	4602      	mov	r2, r0
 8002296:	4b05      	ldr	r3, [pc, #20]	; (80022ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	0a9b      	lsrs	r3, r3, #10
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	4903      	ldr	r1, [pc, #12]	; (80022b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022a2:	5ccb      	ldrb	r3, [r1, r3]
 80022a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40023800 	.word	0x40023800
 80022b0:	08003a28 	.word	0x08003a28

080022b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80022b8:	f7ff ffdc 	bl	8002274 <HAL_RCC_GetHCLKFreq>
 80022bc:	4602      	mov	r2, r0
 80022be:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	0b5b      	lsrs	r3, r3, #13
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	4903      	ldr	r1, [pc, #12]	; (80022d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022ca:	5ccb      	ldrb	r3, [r1, r3]
 80022cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40023800 	.word	0x40023800
 80022d8:	08003a28 	.word	0x08003a28

080022dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e07b      	b.n	80023e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d108      	bne.n	8002308 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022fe:	d009      	beq.n	8002314 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	61da      	str	r2, [r3, #28]
 8002306:	e005      	b.n	8002314 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d106      	bne.n	8002334 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7fe faf6 	bl	8000920 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800234a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800235c:	431a      	orrs	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002366:	431a      	orrs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	431a      	orrs	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002384:	431a      	orrs	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002398:	ea42 0103 	orr.w	r1, r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	0c1b      	lsrs	r3, r3, #16
 80023b2:	f003 0104 	and.w	r1, r3, #4
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	f003 0210 	and.w	r2, r3, #16
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	69da      	ldr	r2, [r3, #28]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b087      	sub	sp, #28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <HAL_SPI_TransmitReceive_IT+0x20>
 800240c:	2302      	movs	r3, #2
 800240e:	e075      	b.n	80024fc <HAL_SPI_TransmitReceive_IT+0x10c>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800241e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002426:	7dbb      	ldrb	r3, [r7, #22]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d00d      	beq.n	8002448 <HAL_SPI_TransmitReceive_IT+0x58>
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002432:	d106      	bne.n	8002442 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d102      	bne.n	8002442 <HAL_SPI_TransmitReceive_IT+0x52>
 800243c:	7dbb      	ldrb	r3, [r7, #22]
 800243e:	2b04      	cmp	r3, #4
 8002440:	d002      	beq.n	8002448 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8002442:	2302      	movs	r3, #2
 8002444:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002446:	e054      	b.n	80024f2 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d005      	beq.n	800245a <HAL_SPI_TransmitReceive_IT+0x6a>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d002      	beq.n	800245a <HAL_SPI_TransmitReceive_IT+0x6a>
 8002454:	887b      	ldrh	r3, [r7, #2]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d102      	bne.n	8002460 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800245e:	e048      	b.n	80024f2 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b04      	cmp	r3, #4
 800246a:	d003      	beq.n	8002474 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2205      	movs	r2, #5
 8002470:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	68ba      	ldr	r2, [r7, #8]
 800247e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	887a      	ldrh	r2, [r7, #2]
 8002484:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	887a      	ldrh	r2, [r7, #2]
 800248a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	887a      	ldrh	r2, [r7, #2]
 8002496:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	887a      	ldrh	r2, [r7, #2]
 800249c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d006      	beq.n	80024b4 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4a17      	ldr	r2, [pc, #92]	; (8002508 <HAL_SPI_TransmitReceive_IT+0x118>)
 80024aa:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4a17      	ldr	r2, [pc, #92]	; (800250c <HAL_SPI_TransmitReceive_IT+0x11c>)
 80024b0:	645a      	str	r2, [r3, #68]	; 0x44
 80024b2:	e005      	b.n	80024c0 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4a16      	ldr	r2, [pc, #88]	; (8002510 <HAL_SPI_TransmitReceive_IT+0x120>)
 80024b8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	4a15      	ldr	r2, [pc, #84]	; (8002514 <HAL_SPI_TransmitReceive_IT+0x124>)
 80024be:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80024ce:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024da:	2b40      	cmp	r3, #64	; 0x40
 80024dc:	d008      	beq.n	80024f0 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	e000      	b.n	80024f2 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 80024f0:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80024fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	371c      	adds	r7, #28
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	08002845 	.word	0x08002845
 800250c:	080028a5 	.word	0x080028a5
 8002510:	08002781 	.word	0x08002781
 8002514:	080027e5 	.word	0x080027e5

08002518 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b088      	sub	sp, #32
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	099b      	lsrs	r3, r3, #6
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10f      	bne.n	800255c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00a      	beq.n	800255c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	099b      	lsrs	r3, r3, #6
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d004      	beq.n	800255c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	4798      	blx	r3
    return;
 800255a:	e0d7      	b.n	800270c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	085b      	lsrs	r3, r3, #1
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00a      	beq.n	800257e <HAL_SPI_IRQHandler+0x66>
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	09db      	lsrs	r3, r3, #7
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	d004      	beq.n	800257e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	4798      	blx	r3
    return;
 800257c:	e0c6      	b.n	800270c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	095b      	lsrs	r3, r3, #5
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10c      	bne.n	80025a4 <HAL_SPI_IRQHandler+0x8c>
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	099b      	lsrs	r3, r3, #6
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d106      	bne.n	80025a4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	0a1b      	lsrs	r3, r3, #8
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 80b4 	beq.w	800270c <HAL_SPI_IRQHandler+0x1f4>
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	095b      	lsrs	r3, r3, #5
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 80ad 	beq.w	800270c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	099b      	lsrs	r3, r3, #6
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d023      	beq.n	8002606 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	d011      	beq.n	80025ee <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ce:	f043 0204 	orr.w	r2, r3, #4
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	617b      	str	r3, [r7, #20]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	617b      	str	r3, [r7, #20]
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	e00b      	b.n	8002606 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025ee:	2300      	movs	r3, #0
 80025f0:	613b      	str	r3, [r7, #16]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	693b      	ldr	r3, [r7, #16]
        return;
 8002604:	e082      	b.n	800270c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	095b      	lsrs	r3, r3, #5
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d014      	beq.n	800263c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002616:	f043 0201 	orr.w	r2, r3, #1
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	0a1b      	lsrs	r3, r3, #8
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00c      	beq.n	8002662 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264c:	f043 0208 	orr.w	r2, r3, #8
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002654:	2300      	movs	r3, #0
 8002656:	60bb      	str	r3, [r7, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002666:	2b00      	cmp	r3, #0
 8002668:	d04f      	beq.n	800270a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002678:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d104      	bne.n	8002696 <HAL_SPI_IRQHandler+0x17e>
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d034      	beq.n	8002700 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0203 	bic.w	r2, r2, #3
 80026a4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d011      	beq.n	80026d2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b2:	4a18      	ldr	r2, [pc, #96]	; (8002714 <HAL_SPI_IRQHandler+0x1fc>)
 80026b4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fe fda2 	bl	8001204 <HAL_DMA_Abort_IT>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d005      	beq.n	80026d2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d016      	beq.n	8002708 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026de:	4a0d      	ldr	r2, [pc, #52]	; (8002714 <HAL_SPI_IRQHandler+0x1fc>)
 80026e0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fe fd8c 	bl	8001204 <HAL_DMA_Abort_IT>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00a      	beq.n	8002708 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80026fe:	e003      	b.n	8002708 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 f813 	bl	800272c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002706:	e000      	b.n	800270a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002708:	bf00      	nop
    return;
 800270a:	bf00      	nop
  }
}
 800270c:	3720      	adds	r7, #32
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	08002759 	.word	0x08002759

08002718 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800274c:	4618      	mov	r0, r3
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002764:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f7ff ffda 	bl	800272c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002778:	bf00      	nop
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f103 020c 	add.w	r2, r3, #12
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002794:	7812      	ldrb	r2, [r2, #0]
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279e:	1c5a      	adds	r2, r3, #1
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10f      	bne.n	80027dc <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80027ca:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d102      	bne.n	80027dc <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f95e 	bl	8002a98 <SPI_CloseRxTx_ISR>
    }
  }
}
 80027dc:	bf00      	nop
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	330c      	adds	r3, #12
 80027f6:	7812      	ldrb	r2, [r2, #0]
 80027f8:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002808:	b29b      	uxth	r3, r3
 800280a:	3b01      	subs	r3, #1
 800280c:	b29a      	uxth	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002816:	b29b      	uxth	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10f      	bne.n	800283c <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800282a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002830:	b29b      	uxth	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d102      	bne.n	800283c <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f92e 	bl	8002a98 <SPI_CloseRxTx_ISR>
    }
  }
}
 800283c:	bf00      	nop
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002856:	b292      	uxth	r2, r2
 8002858:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285e:	1c9a      	adds	r2, r3, #2
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002868:	b29b      	uxth	r3, r3
 800286a:	3b01      	subs	r3, #1
 800286c:	b29a      	uxth	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002876:	b29b      	uxth	r3, r3
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10f      	bne.n	800289c <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800288a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002890:	b29b      	uxth	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d102      	bne.n	800289c <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f8fe 	bl	8002a98 <SPI_CloseRxTx_ISR>
    }
  }
}
 800289c:	bf00      	nop
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b0:	881a      	ldrh	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028bc:	1c9a      	adds	r2, r3, #2
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10f      	bne.n	80028fa <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028e8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d102      	bne.n	80028fa <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f8cf 	bl	8002a98 <SPI_CloseRxTx_ISR>
    }
  }
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b088      	sub	sp, #32
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	603b      	str	r3, [r7, #0]
 8002910:	4613      	mov	r3, r2
 8002912:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002914:	f7fe fa1e 	bl	8000d54 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	4413      	add	r3, r2
 8002922:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002924:	f7fe fa16 	bl	8000d54 <HAL_GetTick>
 8002928:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800292a:	4b39      	ldr	r3, [pc, #228]	; (8002a10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	015b      	lsls	r3, r3, #5
 8002930:	0d1b      	lsrs	r3, r3, #20
 8002932:	69fa      	ldr	r2, [r7, #28]
 8002934:	fb02 f303 	mul.w	r3, r2, r3
 8002938:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800293a:	e054      	b.n	80029e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002942:	d050      	beq.n	80029e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002944:	f7fe fa06 	bl	8000d54 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	69fa      	ldr	r2, [r7, #28]
 8002950:	429a      	cmp	r2, r3
 8002952:	d902      	bls.n	800295a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d13d      	bne.n	80029d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002968:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002972:	d111      	bne.n	8002998 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800297c:	d004      	beq.n	8002988 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002986:	d107      	bne.n	8002998 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002996:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029a0:	d10f      	bne.n	80029c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e017      	b.n	8002a06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80029dc:	2300      	movs	r3, #0
 80029de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	4013      	ands	r3, r2
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	bf0c      	ite	eq
 80029f6:	2301      	moveq	r3, #1
 80029f8:	2300      	movne	r3, #0
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	461a      	mov	r2, r3
 80029fe:	79fb      	ldrb	r3, [r7, #7]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d19b      	bne.n	800293c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3720      	adds	r7, #32
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000000 	.word	0x20000000

08002a14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af02      	add	r7, sp, #8
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002a20:	4b1b      	ldr	r3, [pc, #108]	; (8002a90 <SPI_EndRxTxTransaction+0x7c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a1b      	ldr	r2, [pc, #108]	; (8002a94 <SPI_EndRxTxTransaction+0x80>)
 8002a26:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2a:	0d5b      	lsrs	r3, r3, #21
 8002a2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a30:	fb02 f303 	mul.w	r3, r2, r3
 8002a34:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a3e:	d112      	bne.n	8002a66 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2200      	movs	r2, #0
 8002a48:	2180      	movs	r1, #128	; 0x80
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f7ff ff5a 	bl	8002904 <SPI_WaitFlagStateUntilTimeout>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d016      	beq.n	8002a84 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5a:	f043 0220 	orr.w	r2, r3, #32
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e00f      	b.n	8002a86 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00a      	beq.n	8002a82 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7c:	2b80      	cmp	r3, #128	; 0x80
 8002a7e:	d0f2      	beq.n	8002a66 <SPI_EndRxTxTransaction+0x52>
 8002a80:	e000      	b.n	8002a84 <SPI_EndRxTxTransaction+0x70>
        break;
 8002a82:	bf00      	nop
  }

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20000000 	.word	0x20000000
 8002a94:	165e9f81 	.word	0x165e9f81

08002a98 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002aa0:	4b35      	ldr	r3, [pc, #212]	; (8002b78 <SPI_CloseRxTx_ISR+0xe0>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a35      	ldr	r2, [pc, #212]	; (8002b7c <SPI_CloseRxTx_ISR+0xe4>)
 8002aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aaa:	0a5b      	lsrs	r3, r3, #9
 8002aac:	2264      	movs	r2, #100	; 0x64
 8002aae:	fb02 f303 	mul.w	r3, r2, r3
 8002ab2:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ab4:	f7fe f94e 	bl	8000d54 <HAL_GetTick>
 8002ab8:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 0220 	bic.w	r2, r2, #32
 8002ac8:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d106      	bne.n	8002ade <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad4:	f043 0220 	orr.w	r2, r3, #32
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002adc:	e009      	b.n	8002af2 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0eb      	beq.n	8002aca <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	2164      	movs	r1, #100	; 0x64
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7ff ff8c 	bl	8002a14 <SPI_EndRxTxTransaction>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d005      	beq.n	8002b0e <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b06:	f043 0220 	orr.w	r2, r3, #32
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10a      	bne.n	8002b2c <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d115      	bne.n	8002b60 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d107      	bne.n	8002b50 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7ff fde5 	bl	8002718 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002b4e:	e00e      	b.n	8002b6e <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f7fd fcb7 	bl	80004cc <HAL_SPI_TxRxCpltCallback>
}
 8002b5e:	e006      	b.n	8002b6e <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7ff fddf 	bl	800272c <HAL_SPI_ErrorCallback>
}
 8002b6e:	bf00      	nop
 8002b70:	3718      	adds	r7, #24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	20000000 	.word	0x20000000
 8002b7c:	057619f1 	.word	0x057619f1

08002b80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e03f      	b.n	8002c12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d106      	bne.n	8002bac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7fd ff2a 	bl	8000a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2224      	movs	r2, #36	; 0x24
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 fc7b 	bl	80034c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	691a      	ldr	r2, [r3, #16]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695a      	ldr	r2, [r3, #20]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002be8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bf8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2220      	movs	r2, #32
 8002c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b0ba      	sub	sp, #232	; 0xe8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002c5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10f      	bne.n	8002c82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c66:	f003 0320 	and.w	r3, r3, #32
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d009      	beq.n	8002c82 <HAL_UART_IRQHandler+0x66>
 8002c6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c72:	f003 0320 	and.w	r3, r3, #32
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 fb65 	bl	800334a <UART_Receive_IT>
      return;
 8002c80:	e256      	b.n	8003130 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002c82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 80de 	beq.w	8002e48 <HAL_UART_IRQHandler+0x22c>
 8002c8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d106      	bne.n	8002ca6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c9c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 80d1 	beq.w	8002e48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00b      	beq.n	8002cca <HAL_UART_IRQHandler+0xae>
 8002cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d005      	beq.n	8002cca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f043 0201 	orr.w	r2, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cce:	f003 0304 	and.w	r3, r3, #4
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00b      	beq.n	8002cee <HAL_UART_IRQHandler+0xd2>
 8002cd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d005      	beq.n	8002cee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	f043 0202 	orr.w	r2, r3, #2
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00b      	beq.n	8002d12 <HAL_UART_IRQHandler+0xf6>
 8002cfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d005      	beq.n	8002d12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	f043 0204 	orr.w	r2, r3, #4
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d16:	f003 0308 	and.w	r3, r3, #8
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d011      	beq.n	8002d42 <HAL_UART_IRQHandler+0x126>
 8002d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d22:	f003 0320 	and.w	r3, r3, #32
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d105      	bne.n	8002d36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d005      	beq.n	8002d42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	f043 0208 	orr.w	r2, r3, #8
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 81ed 	beq.w	8003126 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d50:	f003 0320 	and.w	r3, r3, #32
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d008      	beq.n	8002d6a <HAL_UART_IRQHandler+0x14e>
 8002d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d5c:	f003 0320 	and.w	r3, r3, #32
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d002      	beq.n	8002d6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 faf0 	bl	800334a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d74:	2b40      	cmp	r3, #64	; 0x40
 8002d76:	bf0c      	ite	eq
 8002d78:	2301      	moveq	r3, #1
 8002d7a:	2300      	movne	r3, #0
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d103      	bne.n	8002d96 <HAL_UART_IRQHandler+0x17a>
 8002d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d04f      	beq.n	8002e36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f9f8 	bl	800318c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da6:	2b40      	cmp	r3, #64	; 0x40
 8002da8:	d141      	bne.n	8002e2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	3314      	adds	r3, #20
 8002db0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002db8:	e853 3f00 	ldrex	r3, [r3]
 8002dbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002dc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002dc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	3314      	adds	r3, #20
 8002dd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002dd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002dda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002de2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002de6:	e841 2300 	strex	r3, r2, [r1]
 8002dea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002dee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1d9      	bne.n	8002daa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d013      	beq.n	8002e26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e02:	4a7d      	ldr	r2, [pc, #500]	; (8002ff8 <HAL_UART_IRQHandler+0x3dc>)
 8002e04:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fe f9fa 	bl	8001204 <HAL_DMA_Abort_IT>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d016      	beq.n	8002e44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e20:	4610      	mov	r0, r2
 8002e22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e24:	e00e      	b.n	8002e44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f99a 	bl	8003160 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e2c:	e00a      	b.n	8002e44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f996 	bl	8003160 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e34:	e006      	b.n	8002e44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f992 	bl	8003160 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002e42:	e170      	b.n	8003126 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e44:	bf00      	nop
    return;
 8002e46:	e16e      	b.n	8003126 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	f040 814a 	bne.w	80030e6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e56:	f003 0310 	and.w	r3, r3, #16
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 8143 	beq.w	80030e6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e64:	f003 0310 	and.w	r3, r3, #16
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 813c 	beq.w	80030e6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60bb      	str	r3, [r7, #8]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	60bb      	str	r3, [r7, #8]
 8002e82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8e:	2b40      	cmp	r3, #64	; 0x40
 8002e90:	f040 80b4 	bne.w	8002ffc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ea0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 8140 	beq.w	800312a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002eae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	f080 8139 	bcs.w	800312a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ebe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eca:	f000 8088 	beq.w	8002fde <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	330c      	adds	r3, #12
 8002ed4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002edc:	e853 3f00 	ldrex	r3, [r3]
 8002ee0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002ee4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	330c      	adds	r3, #12
 8002ef6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002efa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002efe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002f06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f0a:	e841 2300 	strex	r3, r2, [r1]
 8002f0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002f12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1d9      	bne.n	8002ece <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	3314      	adds	r3, #20
 8002f20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f24:	e853 3f00 	ldrex	r3, [r3]
 8002f28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f2c:	f023 0301 	bic.w	r3, r3, #1
 8002f30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	3314      	adds	r3, #20
 8002f3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f4a:	e841 2300 	strex	r3, r2, [r1]
 8002f4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1e1      	bne.n	8002f1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	3314      	adds	r3, #20
 8002f5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f60:	e853 3f00 	ldrex	r3, [r3]
 8002f64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002f66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	3314      	adds	r3, #20
 8002f76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f82:	e841 2300 	strex	r3, r2, [r1]
 8002f86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1e3      	bne.n	8002f56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	330c      	adds	r3, #12
 8002fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fa6:	e853 3f00 	ldrex	r3, [r3]
 8002faa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fae:	f023 0310 	bic.w	r3, r3, #16
 8002fb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	330c      	adds	r3, #12
 8002fbc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002fc0:	65ba      	str	r2, [r7, #88]	; 0x58
 8002fc2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002fc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fc8:	e841 2300 	strex	r3, r2, [r1]
 8002fcc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1e3      	bne.n	8002f9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7fe f8a3 	bl	8001124 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	4619      	mov	r1, r3
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f8c0 	bl	8003174 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ff4:	e099      	b.n	800312a <HAL_UART_IRQHandler+0x50e>
 8002ff6:	bf00      	nop
 8002ff8:	08003253 	.word	0x08003253
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003004:	b29b      	uxth	r3, r3
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003010:	b29b      	uxth	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 808b 	beq.w	800312e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003018:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 8086 	beq.w	800312e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	330c      	adds	r3, #12
 8003028:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800302c:	e853 3f00 	ldrex	r3, [r3]
 8003030:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003034:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003038:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	330c      	adds	r3, #12
 8003042:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003046:	647a      	str	r2, [r7, #68]	; 0x44
 8003048:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800304a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800304c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800304e:	e841 2300 	strex	r3, r2, [r1]
 8003052:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1e3      	bne.n	8003022 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	3314      	adds	r3, #20
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	e853 3f00 	ldrex	r3, [r3]
 8003068:	623b      	str	r3, [r7, #32]
   return(result);
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	f023 0301 	bic.w	r3, r3, #1
 8003070:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	3314      	adds	r3, #20
 800307a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800307e:	633a      	str	r2, [r7, #48]	; 0x30
 8003080:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003082:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003086:	e841 2300 	strex	r3, r2, [r1]
 800308a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800308c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1e3      	bne.n	800305a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	330c      	adds	r3, #12
 80030a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	e853 3f00 	ldrex	r3, [r3]
 80030ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f023 0310 	bic.w	r3, r3, #16
 80030b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	330c      	adds	r3, #12
 80030c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80030c4:	61fa      	str	r2, [r7, #28]
 80030c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c8:	69b9      	ldr	r1, [r7, #24]
 80030ca:	69fa      	ldr	r2, [r7, #28]
 80030cc:	e841 2300 	strex	r3, r2, [r1]
 80030d0:	617b      	str	r3, [r7, #20]
   return(result);
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1e3      	bne.n	80030a0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030dc:	4619      	mov	r1, r3
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f848 	bl	8003174 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80030e4:	e023      	b.n	800312e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80030e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d009      	beq.n	8003106 <HAL_UART_IRQHandler+0x4ea>
 80030f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f8bb 	bl	800327a <UART_Transmit_IT>
    return;
 8003104:	e014      	b.n	8003130 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800310a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00e      	beq.n	8003130 <HAL_UART_IRQHandler+0x514>
 8003112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311a:	2b00      	cmp	r3, #0
 800311c:	d008      	beq.n	8003130 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f8fb 	bl	800331a <UART_EndTransmit_IT>
    return;
 8003124:	e004      	b.n	8003130 <HAL_UART_IRQHandler+0x514>
    return;
 8003126:	bf00      	nop
 8003128:	e002      	b.n	8003130 <HAL_UART_IRQHandler+0x514>
      return;
 800312a:	bf00      	nop
 800312c:	e000      	b.n	8003130 <HAL_UART_IRQHandler+0x514>
      return;
 800312e:	bf00      	nop
  }
}
 8003130:	37e8      	adds	r7, #232	; 0xe8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop

08003138 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	460b      	mov	r3, r1
 800317e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800318c:	b480      	push	{r7}
 800318e:	b095      	sub	sp, #84	; 0x54
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	330c      	adds	r3, #12
 800319a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800319e:	e853 3f00 	ldrex	r3, [r3]
 80031a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80031a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	330c      	adds	r3, #12
 80031b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031b4:	643a      	str	r2, [r7, #64]	; 0x40
 80031b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80031ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80031bc:	e841 2300 	strex	r3, r2, [r1]
 80031c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80031c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1e5      	bne.n	8003194 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	3314      	adds	r3, #20
 80031ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	e853 3f00 	ldrex	r3, [r3]
 80031d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f023 0301 	bic.w	r3, r3, #1
 80031de:	64bb      	str	r3, [r7, #72]	; 0x48
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3314      	adds	r3, #20
 80031e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031f0:	e841 2300 	strex	r3, r2, [r1]
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1e5      	bne.n	80031c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003200:	2b01      	cmp	r3, #1
 8003202:	d119      	bne.n	8003238 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	330c      	adds	r3, #12
 800320a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	e853 3f00 	ldrex	r3, [r3]
 8003212:	60bb      	str	r3, [r7, #8]
   return(result);
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f023 0310 	bic.w	r3, r3, #16
 800321a:	647b      	str	r3, [r7, #68]	; 0x44
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	330c      	adds	r3, #12
 8003222:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003224:	61ba      	str	r2, [r7, #24]
 8003226:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003228:	6979      	ldr	r1, [r7, #20]
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	e841 2300 	strex	r3, r2, [r1]
 8003230:	613b      	str	r3, [r7, #16]
   return(result);
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1e5      	bne.n	8003204 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2220      	movs	r2, #32
 800323c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003246:	bf00      	nop
 8003248:	3754      	adds	r7, #84	; 0x54
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b084      	sub	sp, #16
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f7ff ff77 	bl	8003160 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003272:	bf00      	nop
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800327a:	b480      	push	{r7}
 800327c:	b085      	sub	sp, #20
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b21      	cmp	r3, #33	; 0x21
 800328c:	d13e      	bne.n	800330c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003296:	d114      	bne.n	80032c2 <UART_Transmit_IT+0x48>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d110      	bne.n	80032c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	461a      	mov	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	1c9a      	adds	r2, r3, #2
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	621a      	str	r2, [r3, #32]
 80032c0:	e008      	b.n	80032d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	1c59      	adds	r1, r3, #1
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6211      	str	r1, [r2, #32]
 80032cc:	781a      	ldrb	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032d8:	b29b      	uxth	r3, r3
 80032da:	3b01      	subs	r3, #1
 80032dc:	b29b      	uxth	r3, r3
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	4619      	mov	r1, r3
 80032e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10f      	bne.n	8003308 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68da      	ldr	r2, [r3, #12]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003306:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003308:	2300      	movs	r3, #0
 800330a:	e000      	b.n	800330e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800330c:	2302      	movs	r3, #2
  }
}
 800330e:	4618      	mov	r0, r3
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b082      	sub	sp, #8
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68da      	ldr	r2, [r3, #12]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003330:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2220      	movs	r2, #32
 8003336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7ff fefc 	bl	8003138 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b08c      	sub	sp, #48	; 0x30
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b22      	cmp	r3, #34	; 0x22
 800335c:	f040 80ab 	bne.w	80034b6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003368:	d117      	bne.n	800339a <UART_Receive_IT+0x50>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d113      	bne.n	800339a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003372:	2300      	movs	r3, #0
 8003374:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	b29b      	uxth	r3, r3
 8003384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003388:	b29a      	uxth	r2, r3
 800338a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003392:	1c9a      	adds	r2, r3, #2
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	629a      	str	r2, [r3, #40]	; 0x28
 8003398:	e026      	b.n	80033e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80033a0:	2300      	movs	r3, #0
 80033a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ac:	d007      	beq.n	80033be <UART_Receive_IT+0x74>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10a      	bne.n	80033cc <UART_Receive_IT+0x82>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d106      	bne.n	80033cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c8:	701a      	strb	r2, [r3, #0]
 80033ca:	e008      	b.n	80033de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e2:	1c5a      	adds	r2, r3, #1
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	3b01      	subs	r3, #1
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	4619      	mov	r1, r3
 80033f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d15a      	bne.n	80034b2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0220 	bic.w	r2, r2, #32
 800340a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800341a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	695a      	ldr	r2, [r3, #20]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0201 	bic.w	r2, r2, #1
 800342a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2220      	movs	r2, #32
 8003430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003438:	2b01      	cmp	r3, #1
 800343a:	d135      	bne.n	80034a8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	330c      	adds	r3, #12
 8003448:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	e853 3f00 	ldrex	r3, [r3]
 8003450:	613b      	str	r3, [r7, #16]
   return(result);
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	f023 0310 	bic.w	r3, r3, #16
 8003458:	627b      	str	r3, [r7, #36]	; 0x24
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	330c      	adds	r3, #12
 8003460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003462:	623a      	str	r2, [r7, #32]
 8003464:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003466:	69f9      	ldr	r1, [r7, #28]
 8003468:	6a3a      	ldr	r2, [r7, #32]
 800346a:	e841 2300 	strex	r3, r2, [r1]
 800346e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1e5      	bne.n	8003442 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0310 	and.w	r3, r3, #16
 8003480:	2b10      	cmp	r3, #16
 8003482:	d10a      	bne.n	800349a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003484:	2300      	movs	r3, #0
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800349e:	4619      	mov	r1, r3
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f7ff fe67 	bl	8003174 <HAL_UARTEx_RxEventCallback>
 80034a6:	e002      	b.n	80034ae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7ff fe4f 	bl	800314c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80034ae:	2300      	movs	r3, #0
 80034b0:	e002      	b.n	80034b8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	e000      	b.n	80034b8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80034b6:	2302      	movs	r3, #2
  }
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3730      	adds	r7, #48	; 0x30
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034c4:	b0c0      	sub	sp, #256	; 0x100
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80034d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034dc:	68d9      	ldr	r1, [r3, #12]
 80034de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	ea40 0301 	orr.w	r3, r0, r1
 80034e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	431a      	orrs	r2, r3
 80034f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	431a      	orrs	r2, r3
 8003500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	4313      	orrs	r3, r2
 8003508:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800350c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003518:	f021 010c 	bic.w	r1, r1, #12
 800351c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003526:	430b      	orrs	r3, r1
 8003528:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800352a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800353a:	6999      	ldr	r1, [r3, #24]
 800353c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	ea40 0301 	orr.w	r3, r0, r1
 8003546:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	4b8f      	ldr	r3, [pc, #572]	; (800378c <UART_SetConfig+0x2cc>)
 8003550:	429a      	cmp	r2, r3
 8003552:	d005      	beq.n	8003560 <UART_SetConfig+0xa0>
 8003554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	4b8d      	ldr	r3, [pc, #564]	; (8003790 <UART_SetConfig+0x2d0>)
 800355c:	429a      	cmp	r2, r3
 800355e:	d104      	bne.n	800356a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003560:	f7fe fea8 	bl	80022b4 <HAL_RCC_GetPCLK2Freq>
 8003564:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003568:	e003      	b.n	8003572 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800356a:	f7fe fe8f 	bl	800228c <HAL_RCC_GetPCLK1Freq>
 800356e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003576:	69db      	ldr	r3, [r3, #28]
 8003578:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800357c:	f040 810c 	bne.w	8003798 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003580:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003584:	2200      	movs	r2, #0
 8003586:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800358a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800358e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003592:	4622      	mov	r2, r4
 8003594:	462b      	mov	r3, r5
 8003596:	1891      	adds	r1, r2, r2
 8003598:	65b9      	str	r1, [r7, #88]	; 0x58
 800359a:	415b      	adcs	r3, r3
 800359c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800359e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80035a2:	4621      	mov	r1, r4
 80035a4:	eb12 0801 	adds.w	r8, r2, r1
 80035a8:	4629      	mov	r1, r5
 80035aa:	eb43 0901 	adc.w	r9, r3, r1
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	f04f 0300 	mov.w	r3, #0
 80035b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035c2:	4690      	mov	r8, r2
 80035c4:	4699      	mov	r9, r3
 80035c6:	4623      	mov	r3, r4
 80035c8:	eb18 0303 	adds.w	r3, r8, r3
 80035cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80035d0:	462b      	mov	r3, r5
 80035d2:	eb49 0303 	adc.w	r3, r9, r3
 80035d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80035da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80035e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80035ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80035ee:	460b      	mov	r3, r1
 80035f0:	18db      	adds	r3, r3, r3
 80035f2:	653b      	str	r3, [r7, #80]	; 0x50
 80035f4:	4613      	mov	r3, r2
 80035f6:	eb42 0303 	adc.w	r3, r2, r3
 80035fa:	657b      	str	r3, [r7, #84]	; 0x54
 80035fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003600:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003604:	f7fc fde0 	bl	80001c8 <__aeabi_uldivmod>
 8003608:	4602      	mov	r2, r0
 800360a:	460b      	mov	r3, r1
 800360c:	4b61      	ldr	r3, [pc, #388]	; (8003794 <UART_SetConfig+0x2d4>)
 800360e:	fba3 2302 	umull	r2, r3, r3, r2
 8003612:	095b      	lsrs	r3, r3, #5
 8003614:	011c      	lsls	r4, r3, #4
 8003616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800361a:	2200      	movs	r2, #0
 800361c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003620:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003624:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003628:	4642      	mov	r2, r8
 800362a:	464b      	mov	r3, r9
 800362c:	1891      	adds	r1, r2, r2
 800362e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003630:	415b      	adcs	r3, r3
 8003632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003634:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003638:	4641      	mov	r1, r8
 800363a:	eb12 0a01 	adds.w	sl, r2, r1
 800363e:	4649      	mov	r1, r9
 8003640:	eb43 0b01 	adc.w	fp, r3, r1
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	f04f 0300 	mov.w	r3, #0
 800364c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003650:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003654:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003658:	4692      	mov	sl, r2
 800365a:	469b      	mov	fp, r3
 800365c:	4643      	mov	r3, r8
 800365e:	eb1a 0303 	adds.w	r3, sl, r3
 8003662:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003666:	464b      	mov	r3, r9
 8003668:	eb4b 0303 	adc.w	r3, fp, r3
 800366c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800367c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003680:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003684:	460b      	mov	r3, r1
 8003686:	18db      	adds	r3, r3, r3
 8003688:	643b      	str	r3, [r7, #64]	; 0x40
 800368a:	4613      	mov	r3, r2
 800368c:	eb42 0303 	adc.w	r3, r2, r3
 8003690:	647b      	str	r3, [r7, #68]	; 0x44
 8003692:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003696:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800369a:	f7fc fd95 	bl	80001c8 <__aeabi_uldivmod>
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	4611      	mov	r1, r2
 80036a4:	4b3b      	ldr	r3, [pc, #236]	; (8003794 <UART_SetConfig+0x2d4>)
 80036a6:	fba3 2301 	umull	r2, r3, r3, r1
 80036aa:	095b      	lsrs	r3, r3, #5
 80036ac:	2264      	movs	r2, #100	; 0x64
 80036ae:	fb02 f303 	mul.w	r3, r2, r3
 80036b2:	1acb      	subs	r3, r1, r3
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80036ba:	4b36      	ldr	r3, [pc, #216]	; (8003794 <UART_SetConfig+0x2d4>)
 80036bc:	fba3 2302 	umull	r2, r3, r3, r2
 80036c0:	095b      	lsrs	r3, r3, #5
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036c8:	441c      	add	r4, r3
 80036ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036ce:	2200      	movs	r2, #0
 80036d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80036d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80036dc:	4642      	mov	r2, r8
 80036de:	464b      	mov	r3, r9
 80036e0:	1891      	adds	r1, r2, r2
 80036e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80036e4:	415b      	adcs	r3, r3
 80036e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80036ec:	4641      	mov	r1, r8
 80036ee:	1851      	adds	r1, r2, r1
 80036f0:	6339      	str	r1, [r7, #48]	; 0x30
 80036f2:	4649      	mov	r1, r9
 80036f4:	414b      	adcs	r3, r1
 80036f6:	637b      	str	r3, [r7, #52]	; 0x34
 80036f8:	f04f 0200 	mov.w	r2, #0
 80036fc:	f04f 0300 	mov.w	r3, #0
 8003700:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003704:	4659      	mov	r1, fp
 8003706:	00cb      	lsls	r3, r1, #3
 8003708:	4651      	mov	r1, sl
 800370a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800370e:	4651      	mov	r1, sl
 8003710:	00ca      	lsls	r2, r1, #3
 8003712:	4610      	mov	r0, r2
 8003714:	4619      	mov	r1, r3
 8003716:	4603      	mov	r3, r0
 8003718:	4642      	mov	r2, r8
 800371a:	189b      	adds	r3, r3, r2
 800371c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003720:	464b      	mov	r3, r9
 8003722:	460a      	mov	r2, r1
 8003724:	eb42 0303 	adc.w	r3, r2, r3
 8003728:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800372c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003738:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800373c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003740:	460b      	mov	r3, r1
 8003742:	18db      	adds	r3, r3, r3
 8003744:	62bb      	str	r3, [r7, #40]	; 0x28
 8003746:	4613      	mov	r3, r2
 8003748:	eb42 0303 	adc.w	r3, r2, r3
 800374c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800374e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003752:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003756:	f7fc fd37 	bl	80001c8 <__aeabi_uldivmod>
 800375a:	4602      	mov	r2, r0
 800375c:	460b      	mov	r3, r1
 800375e:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <UART_SetConfig+0x2d4>)
 8003760:	fba3 1302 	umull	r1, r3, r3, r2
 8003764:	095b      	lsrs	r3, r3, #5
 8003766:	2164      	movs	r1, #100	; 0x64
 8003768:	fb01 f303 	mul.w	r3, r1, r3
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	3332      	adds	r3, #50	; 0x32
 8003772:	4a08      	ldr	r2, [pc, #32]	; (8003794 <UART_SetConfig+0x2d4>)
 8003774:	fba2 2303 	umull	r2, r3, r2, r3
 8003778:	095b      	lsrs	r3, r3, #5
 800377a:	f003 0207 	and.w	r2, r3, #7
 800377e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4422      	add	r2, r4
 8003786:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003788:	e105      	b.n	8003996 <UART_SetConfig+0x4d6>
 800378a:	bf00      	nop
 800378c:	40011000 	.word	0x40011000
 8003790:	40011400 	.word	0x40011400
 8003794:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003798:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800379c:	2200      	movs	r2, #0
 800379e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80037a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80037aa:	4642      	mov	r2, r8
 80037ac:	464b      	mov	r3, r9
 80037ae:	1891      	adds	r1, r2, r2
 80037b0:	6239      	str	r1, [r7, #32]
 80037b2:	415b      	adcs	r3, r3
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24
 80037b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037ba:	4641      	mov	r1, r8
 80037bc:	1854      	adds	r4, r2, r1
 80037be:	4649      	mov	r1, r9
 80037c0:	eb43 0501 	adc.w	r5, r3, r1
 80037c4:	f04f 0200 	mov.w	r2, #0
 80037c8:	f04f 0300 	mov.w	r3, #0
 80037cc:	00eb      	lsls	r3, r5, #3
 80037ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037d2:	00e2      	lsls	r2, r4, #3
 80037d4:	4614      	mov	r4, r2
 80037d6:	461d      	mov	r5, r3
 80037d8:	4643      	mov	r3, r8
 80037da:	18e3      	adds	r3, r4, r3
 80037dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80037e0:	464b      	mov	r3, r9
 80037e2:	eb45 0303 	adc.w	r3, r5, r3
 80037e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80037ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80037f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037fa:	f04f 0200 	mov.w	r2, #0
 80037fe:	f04f 0300 	mov.w	r3, #0
 8003802:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003806:	4629      	mov	r1, r5
 8003808:	008b      	lsls	r3, r1, #2
 800380a:	4621      	mov	r1, r4
 800380c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003810:	4621      	mov	r1, r4
 8003812:	008a      	lsls	r2, r1, #2
 8003814:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003818:	f7fc fcd6 	bl	80001c8 <__aeabi_uldivmod>
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	4b60      	ldr	r3, [pc, #384]	; (80039a4 <UART_SetConfig+0x4e4>)
 8003822:	fba3 2302 	umull	r2, r3, r3, r2
 8003826:	095b      	lsrs	r3, r3, #5
 8003828:	011c      	lsls	r4, r3, #4
 800382a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800382e:	2200      	movs	r2, #0
 8003830:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003834:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003838:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800383c:	4642      	mov	r2, r8
 800383e:	464b      	mov	r3, r9
 8003840:	1891      	adds	r1, r2, r2
 8003842:	61b9      	str	r1, [r7, #24]
 8003844:	415b      	adcs	r3, r3
 8003846:	61fb      	str	r3, [r7, #28]
 8003848:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800384c:	4641      	mov	r1, r8
 800384e:	1851      	adds	r1, r2, r1
 8003850:	6139      	str	r1, [r7, #16]
 8003852:	4649      	mov	r1, r9
 8003854:	414b      	adcs	r3, r1
 8003856:	617b      	str	r3, [r7, #20]
 8003858:	f04f 0200 	mov.w	r2, #0
 800385c:	f04f 0300 	mov.w	r3, #0
 8003860:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003864:	4659      	mov	r1, fp
 8003866:	00cb      	lsls	r3, r1, #3
 8003868:	4651      	mov	r1, sl
 800386a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800386e:	4651      	mov	r1, sl
 8003870:	00ca      	lsls	r2, r1, #3
 8003872:	4610      	mov	r0, r2
 8003874:	4619      	mov	r1, r3
 8003876:	4603      	mov	r3, r0
 8003878:	4642      	mov	r2, r8
 800387a:	189b      	adds	r3, r3, r2
 800387c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003880:	464b      	mov	r3, r9
 8003882:	460a      	mov	r2, r1
 8003884:	eb42 0303 	adc.w	r3, r2, r3
 8003888:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800388c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	67bb      	str	r3, [r7, #120]	; 0x78
 8003896:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003898:	f04f 0200 	mov.w	r2, #0
 800389c:	f04f 0300 	mov.w	r3, #0
 80038a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80038a4:	4649      	mov	r1, r9
 80038a6:	008b      	lsls	r3, r1, #2
 80038a8:	4641      	mov	r1, r8
 80038aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038ae:	4641      	mov	r1, r8
 80038b0:	008a      	lsls	r2, r1, #2
 80038b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80038b6:	f7fc fc87 	bl	80001c8 <__aeabi_uldivmod>
 80038ba:	4602      	mov	r2, r0
 80038bc:	460b      	mov	r3, r1
 80038be:	4b39      	ldr	r3, [pc, #228]	; (80039a4 <UART_SetConfig+0x4e4>)
 80038c0:	fba3 1302 	umull	r1, r3, r3, r2
 80038c4:	095b      	lsrs	r3, r3, #5
 80038c6:	2164      	movs	r1, #100	; 0x64
 80038c8:	fb01 f303 	mul.w	r3, r1, r3
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	3332      	adds	r3, #50	; 0x32
 80038d2:	4a34      	ldr	r2, [pc, #208]	; (80039a4 <UART_SetConfig+0x4e4>)
 80038d4:	fba2 2303 	umull	r2, r3, r2, r3
 80038d8:	095b      	lsrs	r3, r3, #5
 80038da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038de:	441c      	add	r4, r3
 80038e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038e4:	2200      	movs	r2, #0
 80038e6:	673b      	str	r3, [r7, #112]	; 0x70
 80038e8:	677a      	str	r2, [r7, #116]	; 0x74
 80038ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80038ee:	4642      	mov	r2, r8
 80038f0:	464b      	mov	r3, r9
 80038f2:	1891      	adds	r1, r2, r2
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	415b      	adcs	r3, r3
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038fe:	4641      	mov	r1, r8
 8003900:	1851      	adds	r1, r2, r1
 8003902:	6039      	str	r1, [r7, #0]
 8003904:	4649      	mov	r1, r9
 8003906:	414b      	adcs	r3, r1
 8003908:	607b      	str	r3, [r7, #4]
 800390a:	f04f 0200 	mov.w	r2, #0
 800390e:	f04f 0300 	mov.w	r3, #0
 8003912:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003916:	4659      	mov	r1, fp
 8003918:	00cb      	lsls	r3, r1, #3
 800391a:	4651      	mov	r1, sl
 800391c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003920:	4651      	mov	r1, sl
 8003922:	00ca      	lsls	r2, r1, #3
 8003924:	4610      	mov	r0, r2
 8003926:	4619      	mov	r1, r3
 8003928:	4603      	mov	r3, r0
 800392a:	4642      	mov	r2, r8
 800392c:	189b      	adds	r3, r3, r2
 800392e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003930:	464b      	mov	r3, r9
 8003932:	460a      	mov	r2, r1
 8003934:	eb42 0303 	adc.w	r3, r2, r3
 8003938:	66fb      	str	r3, [r7, #108]	; 0x6c
 800393a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	663b      	str	r3, [r7, #96]	; 0x60
 8003944:	667a      	str	r2, [r7, #100]	; 0x64
 8003946:	f04f 0200 	mov.w	r2, #0
 800394a:	f04f 0300 	mov.w	r3, #0
 800394e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003952:	4649      	mov	r1, r9
 8003954:	008b      	lsls	r3, r1, #2
 8003956:	4641      	mov	r1, r8
 8003958:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800395c:	4641      	mov	r1, r8
 800395e:	008a      	lsls	r2, r1, #2
 8003960:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003964:	f7fc fc30 	bl	80001c8 <__aeabi_uldivmod>
 8003968:	4602      	mov	r2, r0
 800396a:	460b      	mov	r3, r1
 800396c:	4b0d      	ldr	r3, [pc, #52]	; (80039a4 <UART_SetConfig+0x4e4>)
 800396e:	fba3 1302 	umull	r1, r3, r3, r2
 8003972:	095b      	lsrs	r3, r3, #5
 8003974:	2164      	movs	r1, #100	; 0x64
 8003976:	fb01 f303 	mul.w	r3, r1, r3
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	011b      	lsls	r3, r3, #4
 800397e:	3332      	adds	r3, #50	; 0x32
 8003980:	4a08      	ldr	r2, [pc, #32]	; (80039a4 <UART_SetConfig+0x4e4>)
 8003982:	fba2 2303 	umull	r2, r3, r2, r3
 8003986:	095b      	lsrs	r3, r3, #5
 8003988:	f003 020f 	and.w	r2, r3, #15
 800398c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4422      	add	r2, r4
 8003994:	609a      	str	r2, [r3, #8]
}
 8003996:	bf00      	nop
 8003998:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800399c:	46bd      	mov	sp, r7
 800399e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039a2:	bf00      	nop
 80039a4:	51eb851f 	.word	0x51eb851f

080039a8 <__libc_init_array>:
 80039a8:	b570      	push	{r4, r5, r6, lr}
 80039aa:	4d0d      	ldr	r5, [pc, #52]	; (80039e0 <__libc_init_array+0x38>)
 80039ac:	4c0d      	ldr	r4, [pc, #52]	; (80039e4 <__libc_init_array+0x3c>)
 80039ae:	1b64      	subs	r4, r4, r5
 80039b0:	10a4      	asrs	r4, r4, #2
 80039b2:	2600      	movs	r6, #0
 80039b4:	42a6      	cmp	r6, r4
 80039b6:	d109      	bne.n	80039cc <__libc_init_array+0x24>
 80039b8:	4d0b      	ldr	r5, [pc, #44]	; (80039e8 <__libc_init_array+0x40>)
 80039ba:	4c0c      	ldr	r4, [pc, #48]	; (80039ec <__libc_init_array+0x44>)
 80039bc:	f000 f820 	bl	8003a00 <_init>
 80039c0:	1b64      	subs	r4, r4, r5
 80039c2:	10a4      	asrs	r4, r4, #2
 80039c4:	2600      	movs	r6, #0
 80039c6:	42a6      	cmp	r6, r4
 80039c8:	d105      	bne.n	80039d6 <__libc_init_array+0x2e>
 80039ca:	bd70      	pop	{r4, r5, r6, pc}
 80039cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80039d0:	4798      	blx	r3
 80039d2:	3601      	adds	r6, #1
 80039d4:	e7ee      	b.n	80039b4 <__libc_init_array+0xc>
 80039d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80039da:	4798      	blx	r3
 80039dc:	3601      	adds	r6, #1
 80039de:	e7f2      	b.n	80039c6 <__libc_init_array+0x1e>
 80039e0:	08003a40 	.word	0x08003a40
 80039e4:	08003a40 	.word	0x08003a40
 80039e8:	08003a40 	.word	0x08003a40
 80039ec:	08003a44 	.word	0x08003a44

080039f0 <memset>:
 80039f0:	4402      	add	r2, r0
 80039f2:	4603      	mov	r3, r0
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d100      	bne.n	80039fa <memset+0xa>
 80039f8:	4770      	bx	lr
 80039fa:	f803 1b01 	strb.w	r1, [r3], #1
 80039fe:	e7f9      	b.n	80039f4 <memset+0x4>

08003a00 <_init>:
 8003a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a02:	bf00      	nop
 8003a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a06:	bc08      	pop	{r3}
 8003a08:	469e      	mov	lr, r3
 8003a0a:	4770      	bx	lr

08003a0c <_fini>:
 8003a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a0e:	bf00      	nop
 8003a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a12:	bc08      	pop	{r3}
 8003a14:	469e      	mov	lr, r3
 8003a16:	4770      	bx	lr
